/*
 * Automatically Generated from Mathematica.
 * Mon 12 Jun 2017 18:26:11 GMT-04:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;


#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t5230;
  double t4688;
  double t9938;
  double t12777;
  double t25181;
  double t26870;
  double t27201;
  double t27629;
  double t28574;
  double t28886;
  double t28951;
  double t29029;
  double t29030;
  double t29031;
  double t29299;
  double t29138;
  double t29235;
  double t29284;
  double t29035;
  double t29306;
  double t29317;
  double t29318;
  double t28901;
  double t28960;
  double t29018;
  double t29033;
  double t29094;
  double t29120;
  double t29298;
  double t29319;
  double t29320;
  double t29346;
  double t29347;
  double t31525;
  double t31534;
  double t31723;
  double t31739;
  double t29349;
  double t29359;
  double t31392;
  double t31731;
  double t31748;
  double t31749;
  double t31750;
  double t31771;
  double t31781;
  double t31794;
  double t31878;
  double t31894;
  double t32013;
  double t32039;
  double t32335;
  double t32337;
  double t32435;
  double t32441;
  double t32099;
  double t32247;
  double t32249;
  double t32440;
  double t32448;
  double t32518;
  double t32610;
  double t32699;
  double t32753;
  double t32756;
  double t32765;
  double t32783;
  double t32808;
  double t32841;
  double t33006;
  double t33070;
  double t33189;
  double t33234;
  double t32868;
  double t32883;
  double t32889;
  double t33228;
  double t33257;
  double t33262;
  double t33263;
  double t33266;
  double t33293;
  double t33299;
  double t33316;
  double t33324;
  double t33331;
  double t33379;
  double t33555;
  double t33582;
  double t33457;
  double t33462;
  double t33477;
  double t33557;
  double t33571;
  double t33573;
  double t33588;
  double t33590;
  double t33591;
  double t33629;
  double t33724;
  double t33745;
  double t33756;
  double t33759;
  double t33820;
  double t33823;
  double t33831;
  double t33860;
  double t33773;
  double t33780;
  double t33801;
  double t33944;
  double t33957;
  double t33965;
  double t33833;
  double t33916;
  double t33929;
  double t33968;
  double t33974;
  double t33993;
  double t33994;
  double t33995;
  double t34004;
  double t34007;
  double t34010;
  double t34115;
  double t34127;
  double t34137;
  double t34199;
  double t34012;
  double t34013;
  double t34017;
  double t28950;
  double t35088;
  double t35113;
  double t35115;
  double t35182;
  double t35250;
  double t35255;
  double t35135;
  double t35151;
  double t35159;
  double t35289;
  double t35102;
  double t35106;
  double t35112;
  double t35114;
  double t35116;
  double t35117;
  double t35177;
  double t35302;
  double t35315;
  double t35317;
  double t35627;
  double t35629;
  double t35632;
  double t35635;
  double t35813;
  double t35971;
  double t36015;
  double t36032;
  double t36016;
  double t36161;
  double t36191;
  double t36466;
  double t36467;
  double t36469;
  double t36476;
  double t36526;
  double t36540;
  double t36623;
  double t36625;
  double t36865;
  double t36893;
  double t36894;
  double t36928;
  double t36643;
  double t36649;
  double t36653;
  double t36896;
  double t36969;
  double t36970;
  double t36976;
  double t37056;
  double t37063;
  double t37094;
  double t37095;
  double t37105;
  double t37106;
  double t37107;
  double t37262;
  double t37263;
  double t37266;
  double t37274;
  double t37140;
  double t37141;
  double t37142;
  double t37267;
  double t37282;
  double t37526;
  double t37812;
  double t38364;
  double t38780;
  double t38850;
  double t39192;
  double t39196;
  double t39208;
  double t39237;
  double t39980;
  double t40477;
  double t39383;
  double t39436;
  double t39717;
  double t40100;
  double t40292;
  double t40467;
  double t40479;
  double t40516;
  double t40543;
  double t40547;
  double t40550;
  double t40551;
  double t40576;
  double t40720;
  double t41609;
  double t41831;
  double t41832;
  double t41903;
  double t41007;
  double t41040;
  double t41069;
  double t42118;
  double t42151;
  double t42155;
  double t41892;
  double t41922;
  double t42115;
  double t42224;
  double t42296;
  double t42307;
  double t42316;
  double t42319;
  double t42321;
  double t42323;
  double t42324;
  double t42716;
  double t42802;
  double t42855;
  double t42880;
  double t42333;
  double t42348;
  double t42451;
  double t43452;
  double t43463;
  double t43464;
  double t43467;
  double t43468;
  double t43474;
  double t43435;
  double t43444;
  double t43465;
  double t43493;
  double t43538;
  double t43552;
  double t43562;
  double t43607;
  double t43612;
  double t43624;
  double t43674;
  double t43693;
  double t43713;
  double t43749;
  double t43772;
  double t43775;
  double t43798;
  double t43800;
  double t43824;
  double t43836;
  double t43840;
  double t43843;
  double t43850;
  double t43866;
  double t43894;
  double t43895;
  double t43910;
  double t43913;
  double t43914;
  double t43929;
  double t43933;
  double t43936;
  double t43984;
  double t44013;
  double t44073;
  double t44076;
  double t44084;
  double t44085;
  double t44088;
  double t44151;
  double t44157;
  double t44161;
  double t44176;
  double t44179;
  double t34190;
  double t34201;
  double t34297;
  double t44183;
  double t44192;
  double t44238;
  double t34398;
  double t34596;
  double t34718;
  double t44252;
  double t44253;
  double t44255;
  double t43422;
  double t44520;
  double t44575;
  double t44625;
  double t44485;
  double t44487;
  double t44500;
  double t44478;
  double t44484;
  double t44506;
  double t44626;
  double t44634;
  double t44635;
  double t44658;
  double t44673;
  double t44679;
  double t44681;
  double t44795;
  double t44804;
  double t44810;
  double t44811;
  double t44858;
  double t44873;
  double t44918;
  double t44930;
  double t45100;
  double t45304;
  double t45386;
  double t45436;
  double t45451;
  double t45486;
  double t45493;
  double t45498;
  double t45546;
  double t45560;
  double t45570;
  double t45571;
  double t45616;
  double t45637;
  double t45641;
  double t45669;
  double t45810;
  double t45892;
  double t45972;
  double t45974;
  double t45978;
  double t46039;
  double t46043;
  double t46048;
  double t46064;
  double t46097;
  double t42869;
  double t42926;
  double t43058;
  double t46099;
  double t46108;
  double t46111;
  double t43097;
  double t43101;
  double t43212;
  double t46128;
  double t46131;
  double t46146;
  double t46301;
  double t46302;
  double t46303;
  double t46266;
  double t46272;
  double t46292;
  double t46304;
  double t46321;
  double t46331;
  double t46333;
  double t46334;
  double t46340;
  double t46345;
  double t46347;
  double t46348;
  double t46371;
  double t46394;
  double t46395;
  double t46397;
  double t46402;
  double t46416;
  double t46418;
  double t46421;
  double t46431;
  double t46438;
  double t46439;
  double t46458;
  double t46460;
  double t46467;
  double t46469;
  double t46470;
  double t46492;
  double t46494;
  double t46498;
  double t46514;
  double t46533;
  double t46549;
  double t46550;
  double t46578;
  double t46613;
  double t46621;
  double t46689;
  double t46691;
  double t46694;
  double t46776;
  double t46811;
  double t46823;
  double t46827;
  double t46831;
  double t46832;
  double t46834;
  double t46842;
  double t46850;
  double t46854;
  double t46869;
  double t46332;
  double t47055;
  double t47057;
  double t47058;
  double t47059;
  double t47077;
  double t47120;
  double t47137;
  double t47142;
  double t47143;
  double t47174;
  double t47177;
  double t47178;
  double t47220;
  double t47232;
  double t47315;
  double t47337;
  double t47358;
  double t47432;
  double t47448;
  double t47489;
  double t47505;
  double t47569;
  double t47809;
  double t47882;
  double t47907;
  double t48045;
  double t48061;
  double t48075;
  double t48076;
  double t48105;
  double t48125;
  double t48126;
  double t48149;
  double t48229;
  double t48233;
  double t48253;
  double t48255;
  double t48257;
  double t48284;
  double t48285;
  double t48286;
  double t48318;
  double t48344;
  double t48345;
  double t48360;
  double t48373;
  double t48379;
  double t48382;
  double t48386;
  double t48516;
  double t48534;
  double t48535;
  double t48590;
  double t48597;
  double t48602;
  double t48513;
  double t48515;
  double t48561;
  double t48608;
  double t48632;
  double t48637;
  double t48638;
  double t48642;
  double t48643;
  double t48644;
  double t48659;
  double t48665;
  double t48667;
  double t48695;
  double t48705;
  double t48770;
  double t48809;
  double t48830;
  double t48831;
  double t48844;
  double t48846;
  double t48847;
  double t48865;
  double t48879;
  double t48909;
  double t48970;
  double t48974;
  double t49049;
  double t49051;
  double t49183;
  double t49195;
  double t49238;
  double t49320;
  double t49336;
  double t49338;
  double t49342;
  double t49371;
  double t49372;
  double t49379;
  double t49426;
  double t49436;
  double t49437;
  double t49442;
  double t49671;
  double t49695;
  double t49732;
  double t49663;
  double t49765;
  double t49774;
  double t49809;
  double t49814;
  double t49815;
  double t49887;
  double t49984;
  double t49985;
  double t49986;
  double t49996;
  double t50002;
  double t50062;
  double t50063;
  double t50065;
  double t50182;
  double t50247;
  double t50268;
  double t50271;
  double t50275;
  double t50283;
  double t50288;
  double t50327;
  double t50477;
  double t50478;
  double t50534;
  double t50543;
  double t50560;
  double t50643;
  double t50660;
  double t50665;
  double t50668;
  double t50673;
  double t50688;
  double t50693;
  double t50694;
  double t50699;
  double t50703;
  double t50718;
  double t50932;
  double t50949;
  double t50963;
  double t50864;
  double t50869;
  double t50870;
  double t50877;
  double t50882;
  double t50899;
  double t50979;
  double t50986;
  double t50987;
  double t50991;
  double t50992;
  double t50993;
  double t50994;
  double t51001;
  double t51032;
  double t51033;
  double t51063;
  double t51069;
  double t51094;
  double t51120;
  double t51121;
  double t51122;
  double t51124;
  double t51137;
  double t51138;
  double t51180;
  double t51185;
  double t51203;
  double t51204;
  double t51205;
  double t51243;
  double t51247;
  double t51253;
  double t51258;
  double t51266;
  double t51267;
  double t51268;
  double t51274;
  double t51285;
  double t51287;
  double t51288;
  double t51417;
  double t51418;
  double t51450;
  double t51475;
  double t51509;
  double t51514;
  double t51517;
  double t51520;
  double t51521;
  double t51523;
  double t51527;
  double t51528;
  double t51530;
  double t51535;
  double t51585;
  double t51600;
  double t51604;
  double t51606;
  double t51636;
  double t51648;
  double t51649;
  double t51703;
  double t51704;
  double t51708;
  double t51709;
  double t51711;
  double t51732;
  double t51733;
  double t51738;
  double t51725;
  double t51753;
  double t51755;
  double t51756;
  double t51766;
  double t51775;
  double t51776;
  double t51777;
  double t51894;
  double t51906;
  double t51910;
  double t51866;
  double t51891;
  double t51893;
  double t51912;
  double t51914;
  double t51926;
  double t51936;
  double t51944;
  double t51945;
  double t51967;
  double t51969;
  double t51985;
  double t52000;
  double t52009;
  double t52010;
  double t52011;
  double t52047;
  double t52048;
  double t52054;
  double t52046;
  double t52055;
  double t52056;
  double t52057;
  double t52061;
  double t52069;
  double t52082;
  double t52086;
  double t52136;
  double t52137;
  double t52138;
  double t52034;
  double t52120;
  double t52121;
  double t52122;
  double t52123;
  double t52130;
  double t52135;
  double t52142;
  double t52143;
  double t52144;
  double t52161;
  double t52162;
  double t52160;
  double t52163;
  double t52165;
  double t52166;
  double t52167;
  double t52169;
  double t52174;
  double t52175;
  double t52281;
  double t52285;
  double t52287;
  double t52248;
  double t52249;
  double t52257;
  double t52288;
  double t52289;
  double t52294;
  double t52328;
  double t52336;
  double t52343;
  double t52351;
  double t52368;
  double t52455;
  double t52547;
  double t52548;
  double t52549;
  double t52472;
  double t52578;
  double t52579;
  double t52592;
  double t52618;
  double t52619;
  double t52620;
  double t52667;
  double t52672;
  double t52673;
  double t52575;
  double t52577;
  double t52594;
  double t52659;
  double t52680;
  double t52686;
  double t52687;
  double t52678;
  double t52788;
  double t52793;
  double t52795;
  double t52796;
  double t52797;
  double t52801;
  double t52802;
  double t52823;
  double t52830;
  double t52834;
  double t52844;
  double t52848;
  double t52849;
  double t52853;
  double t52854;
  double t52855;
  double t52868;
  double t52869;
  double t52871;
  double t52875;
  double t52876;
  double t52895;
  double t52896;
  double t52897;
  double t52885;
  double t52898;
  double t52902;
  double t52903;
  double t52904;
  double t52906;
  double t52907;
  double t52908;
  double t52958;
  double t52959;
  double t52960;
  double t52965;
  double t52966;
  double t52963;
  double t52964;
  double t52985;
  double t52987;
  double t52974;
  double t53007;
  double t53008;
  double t53009;
  double t53010;
  double t53011;
  double t53023;
  double t53024;
  double t53027;
  double t53035;
  double t53042;
  double t53044;
  double t53045;
  double t53046;
  double t53049;
  double t53050;
  double t53051;
  double t53057;
  double t53058;
  double t53059;
  double t53060;
  double t53061;
  double t53088;
  double t53089;
  double t53091;
  double t53087;
  double t53092;
  double t53095;
  double t53096;
  double t53098;
  double t53101;
  double t53102;
  double t53103;
  double t53156;
  double t53157;
  double t53158;
  double t53160;
  double t53161;
  double t53162;
  double t53144;
  double t53145;
  double t53146;
  double t53150;
  double t53154;
  double t53155;
  double t53159;
  double t53166;
  double t53167;
  double t53168;
  double t53164;
  double t53180;
  double t53181;
  double t53183;
  double t53184;
  double t53185;
  double t53187;
  double t53188;
  double t53189;
  double t53195;
  double t53196;
  double t53201;
  double t53202;
  double t53204;
  double t53210;
  double t53211;
  double t53212;
  double t53213;
  double t53214;
  double t53215;
  double t53216;
  double t53217;
  double t53225;
  double t53226;
  double t53227;
  double t53252;
  double t53254;
  double t53255;
  double t53256;
  double t53259;
  double t53260;
  double t53261;
  double t53262;
  double t53264;
  double t53265;
  double t53267;
  double t53268;
  double t53271;
  double t53277;
  double t53278;
  double t53281;
  double t53282;
  double t53283;
  double t53285;
  double t53287;
  double t53288;
  double t53293;
  double t53294;
  double t53295;
  double t53296;
  double t53297;
  double t53309;
  double t53310;
  double t53311;
  double t53306;
  double t53312;
  double t53313;
  double t53315;
  double t53316;
  double t53318;
  double t53321;
  double t53322;
  double t53351;
  double t53352;
  double t53354;
  double t53348;
  double t53349;
  double t53350;
  double t53355;
  double t53358;
  double t53359;
  double t53360;
  double t53363;
  double t53365;
  double t53367;
  double t53368;
  double t53374;
  double t53375;
  double t53376;
  double t53377;
  double t53378;
  double t53389;
  double t53391;
  double t53393;
  double t53388;
  double t53394;
  double t53395;
  double t53396;
  double t53397;
  double t53399;
  double t53401;
  double t53402;
  double t53432;
  double t53433;
  double t53434;
  double t53380;
  double t53422;
  double t53423;
  double t53424;
  double t53425;
  double t53426;
  double t53427;
  double t53435;
  double t53436;
  double t53437;
  double t53452;
  double t53454;
  double t53450;
  double t53455;
  double t53456;
  double t53458;
  double t53459;
  double t53461;
  double t53462;
  double t53463;
  double t53484;
  double t53485;
  double t53486;
  double t53481;
  double t53482;
  double t53483;
  double t53487;
  double t53488;
  double t53489;
  double t53490;
  double t53491;
  double t53492;
  double t53494;
  double t53495;
  double t53504;
  double t53530;
  double t53532;
  double t53533;
  double t53510;
  t5230 = Sin(var1[3]);
  t4688 = Cos(var1[4]);
  t9938 = Cos(var1[5]);
  t12777 = Sin(var1[4]);
  t25181 = t9938*t5230*t12777;
  t26870 = Cos(var1[3]);
  t27201 = Sin(var1[5]);
  t27629 = t26870*t27201;
  t28574 = t25181 + t27629;
  t28886 = Sin(var1[14]);
  t28951 = Cos(var1[14]);
  t29029 = t26870*t9938;
  t29030 = -1.*t5230*t12777*t27201;
  t29031 = t29029 + t29030;
  t29299 = Sin(var1[15]);
  t29138 = -1.*t4688*t28886*t5230;
  t29235 = t28951*t29031;
  t29284 = t29138 + t29235;
  t29035 = Cos(var1[15]);
  t29306 = -1.*t28951*t4688*t5230;
  t29317 = -1.*t28886*t29031;
  t29318 = t29306 + t29317;
  t28901 = -0.135*t4688*t28886*t5230;
  t28960 = -1.*t28951;
  t29018 = 1. + t28960;
  t29033 = -0.135*t29018*t29031;
  t29094 = -1.*t29035;
  t29120 = 1. + t29094;
  t29298 = -0.135*t29120*t29284;
  t29319 = 0.135*t29299*t29318;
  t29320 = -1.*t29299*t29284;
  t29346 = t29035*t29318;
  t29347 = t29320 + t29346;
  t31525 = Cos(var1[16]);
  t31534 = -1.*t31525;
  t31723 = 1. + t31534;
  t31739 = Sin(var1[16]);
  t29349 = t29035*t29284;
  t29359 = t29299*t29318;
  t31392 = t29349 + t29359;
  t31731 = -0.049*t31723;
  t31748 = 0.135*t31739;
  t31749 = t31731 + t31748;
  t31750 = t31749*t28574;
  t31771 = -0.135*t31723;
  t31781 = -0.049*t31739;
  t31794 = t31771 + t31781;
  t31878 = t31794*t31392;
  t31894 = t31739*t28574;
  t32013 = t31525*t31392;
  t32039 = t31894 + t32013;
  t32335 = Cos(var1[17]);
  t32337 = -1.*t32335;
  t32435 = 1. + t32337;
  t32441 = Sin(var1[17]);
  t32099 = t31525*t28574;
  t32247 = -1.*t31739*t31392;
  t32249 = t32099 + t32247;
  t32440 = -0.09*t32435;
  t32448 = 0.049*t32441;
  t32518 = t32440 + t32448;
  t32610 = t32518*t29347;
  t32699 = -0.049*t32435;
  t32753 = -0.09*t32441;
  t32756 = t32699 + t32753;
  t32765 = t32756*t32249;
  t32783 = t32441*t29347;
  t32808 = t32335*t32249;
  t32841 = t32783 + t32808;
  t33006 = Cos(var1[18]);
  t33070 = -1.*t33006;
  t33189 = 1. + t33070;
  t33234 = Sin(var1[18]);
  t32868 = t32335*t29347;
  t32883 = -1.*t32441*t32249;
  t32889 = t32868 + t32883;
  t33228 = -0.049*t33189;
  t33257 = -0.21*t33234;
  t33262 = t33228 + t33257;
  t33263 = t33262*t32841;
  t33266 = -0.21*t33189;
  t33293 = 0.049*t33234;
  t33299 = t33266 + t33293;
  t33316 = t33299*t32889;
  t33324 = -1.*t33234*t32841;
  t33331 = t33006*t32889;
  t33379 = t33324 + t33331;
  t33555 = Cos(var1[19]);
  t33582 = Sin(var1[19]);
  t33457 = t33006*t32841;
  t33462 = t33234*t32889;
  t33477 = t33457 + t33462;
  t33557 = -1.*t33555;
  t33571 = 1. + t33557;
  t33573 = -0.2707*t33571;
  t33588 = 0.0016*t33582;
  t33590 = t33573 + t33588;
  t33591 = t33590*t33379;
  t33629 = -1. + t33555;
  t33724 = 0.0016*t33629;
  t33745 = -0.2707*t33582;
  t33756 = t33724 + t33745;
  t33759 = t33756*t33477;
  t33820 = Cos(var1[20]);
  t33823 = -1.*t33820;
  t33831 = 1. + t33823;
  t33860 = Sin(var1[20]);
  t33773 = t33555*t33379;
  t33780 = -1.*t33582*t33477;
  t33801 = t33773 + t33780;
  t33944 = t33582*t33379;
  t33957 = t33555*t33477;
  t33965 = t33944 + t33957;
  t33833 = 0.0184*t33831;
  t33916 = -0.7055*t33860;
  t33929 = t33833 + t33916;
  t33968 = t33929*t33965;
  t33974 = -0.7055*t33831;
  t33993 = -0.0184*t33860;
  t33994 = t33974 + t33993;
  t33995 = t33994*t33801;
  t34004 = -1.*t33860*t33965;
  t34007 = t33820*t33801;
  t34010 = t34004 + t34007;
  t34115 = Cos(var1[21]);
  t34127 = -1.*t34115;
  t34137 = 1. + t34127;
  t34199 = Sin(var1[21]);
  t34012 = t33820*t33965;
  t34013 = t33860*t33801;
  t34017 = t34012 + t34013;
  t28950 = -0.0233*t28574;
  t35088 = Cos(var1[6]);
  t35113 = Sin(var1[6]);
  t35115 = Cos(var1[7]);
  t35182 = -1.*t4688*t35088*t5230;
  t35250 = -1.*t29031*t35113;
  t35255 = t35182 + t35250;
  t35135 = t35088*t29031;
  t35151 = -1.*t4688*t5230*t35113;
  t35159 = t35135 + t35151;
  t35289 = Sin(var1[7]);
  t35102 = -1.*t35088;
  t35106 = 1. + t35102;
  t35112 = 0.135*t35106*t29031;
  t35114 = 0.135*t4688*t5230*t35113;
  t35116 = -1.*t35115;
  t35117 = 1. + t35116;
  t35177 = 0.135*t35117*t35159;
  t35302 = -0.135*t35255*t35289;
  t35315 = t35115*t35255;
  t35317 = -1.*t35159*t35289;
  t35627 = t35315 + t35317;
  t35629 = t35115*t35159;
  t35632 = t35255*t35289;
  t35635 = t35629 + t35632;
  t35813 = Cos(var1[8]);
  t35971 = -1.*t35813;
  t36015 = 1. + t35971;
  t36032 = Sin(var1[8]);
  t36016 = -0.049*t36015;
  t36161 = -0.135*t36032;
  t36191 = t36016 + t36161;
  t36466 = t28574*t36191;
  t36467 = 0.135*t36015;
  t36469 = -0.049*t36032;
  t36476 = t36467 + t36469;
  t36526 = t35635*t36476;
  t36540 = t35813*t35635;
  t36623 = t28574*t36032;
  t36625 = t36540 + t36623;
  t36865 = Cos(var1[9]);
  t36893 = -1.*t36865;
  t36894 = 1. + t36893;
  t36928 = Sin(var1[9]);
  t36643 = t35813*t28574;
  t36649 = -1.*t35635*t36032;
  t36653 = t36643 + t36649;
  t36896 = -0.09*t36894;
  t36969 = 0.049*t36928;
  t36970 = t36896 + t36969;
  t36976 = t36970*t35627;
  t37056 = -0.049*t36894;
  t37063 = -0.09*t36928;
  t37094 = t37056 + t37063;
  t37095 = t37094*t36653;
  t37105 = t36928*t35627;
  t37106 = t36865*t36653;
  t37107 = t37105 + t37106;
  t37262 = Cos(var1[10]);
  t37263 = -1.*t37262;
  t37266 = 1. + t37263;
  t37274 = Sin(var1[10]);
  t37140 = t36865*t35627;
  t37141 = -1.*t36928*t36653;
  t37142 = t37140 + t37141;
  t37267 = -0.049*t37266;
  t37282 = -0.21*t37274;
  t37526 = t37267 + t37282;
  t37812 = t37526*t37107;
  t38364 = -0.21*t37266;
  t38780 = 0.049*t37274;
  t38850 = t38364 + t38780;
  t39192 = t38850*t37142;
  t39196 = -1.*t37274*t37107;
  t39208 = t37262*t37142;
  t39237 = t39196 + t39208;
  t39980 = Cos(var1[11]);
  t40477 = Sin(var1[11]);
  t39383 = t37262*t37107;
  t39436 = t37274*t37142;
  t39717 = t39383 + t39436;
  t40100 = -1.*t39980;
  t40292 = 1. + t40100;
  t40467 = -0.2707*t40292;
  t40479 = 0.0016*t40477;
  t40516 = t40467 + t40479;
  t40543 = t40516*t39237;
  t40547 = -1. + t39980;
  t40550 = 0.0016*t40547;
  t40551 = -0.2707*t40477;
  t40576 = t40550 + t40551;
  t40720 = t40576*t39717;
  t41609 = Cos(var1[12]);
  t41831 = -1.*t41609;
  t41832 = 1. + t41831;
  t41903 = Sin(var1[12]);
  t41007 = t39980*t39237;
  t41040 = -1.*t40477*t39717;
  t41069 = t41007 + t41040;
  t42118 = t40477*t39237;
  t42151 = t39980*t39717;
  t42155 = t42118 + t42151;
  t41892 = 0.0184*t41832;
  t41922 = -0.7055*t41903;
  t42115 = t41892 + t41922;
  t42224 = t42115*t42155;
  t42296 = -0.7055*t41832;
  t42307 = -0.0184*t41903;
  t42316 = t42296 + t42307;
  t42319 = t42316*t41069;
  t42321 = -1.*t41903*t42155;
  t42323 = t41609*t41069;
  t42324 = t42321 + t42323;
  t42716 = Cos(var1[13]);
  t42802 = -1.*t42716;
  t42855 = 1. + t42802;
  t42880 = Sin(var1[13]);
  t42333 = t41609*t42155;
  t42348 = t41903*t41069;
  t42451 = t42333 + t42348;
  t43452 = -1.*t26870*t28886*t12777;
  t43463 = t28951*t26870*t4688*t27201;
  t43464 = t43452 + t43463;
  t43467 = -1.*t28951*t26870*t12777;
  t43468 = -1.*t26870*t4688*t28886*t27201;
  t43474 = t43467 + t43468;
  t43435 = -0.135*t26870*t28886*t12777;
  t43444 = -0.135*t29018*t26870*t4688*t27201;
  t43465 = -0.135*t29120*t43464;
  t43493 = 0.135*t29299*t43474;
  t43538 = -1.*t29299*t43464;
  t43552 = t29035*t43474;
  t43562 = t43538 + t43552;
  t43607 = t29035*t43464;
  t43612 = t29299*t43474;
  t43624 = t43607 + t43612;
  t43674 = -1.*t26870*t4688*t9938*t31749;
  t43693 = t31794*t43624;
  t43713 = -1.*t26870*t4688*t9938*t31739;
  t43749 = t31525*t43624;
  t43772 = t43713 + t43749;
  t43775 = -1.*t31525*t26870*t4688*t9938;
  t43798 = -1.*t31739*t43624;
  t43800 = t43775 + t43798;
  t43824 = t32518*t43562;
  t43836 = t32756*t43800;
  t43840 = t32441*t43562;
  t43843 = t32335*t43800;
  t43850 = t43840 + t43843;
  t43866 = t32335*t43562;
  t43894 = -1.*t32441*t43800;
  t43895 = t43866 + t43894;
  t43910 = t33262*t43850;
  t43913 = t33299*t43895;
  t43914 = -1.*t33234*t43850;
  t43929 = t33006*t43895;
  t43933 = t43914 + t43929;
  t43936 = t33006*t43850;
  t43984 = t33234*t43895;
  t44013 = t43936 + t43984;
  t44073 = t33590*t43933;
  t44076 = t33756*t44013;
  t44084 = t33555*t43933;
  t44085 = -1.*t33582*t44013;
  t44088 = t44084 + t44085;
  t44151 = t33582*t43933;
  t44157 = t33555*t44013;
  t44161 = t44151 + t44157;
  t44176 = t33929*t44161;
  t44179 = t33994*t44088;
  t34190 = -1.1135*t34137;
  t34201 = 0.0216*t34199;
  t34297 = t34190 + t34201;
  t44183 = -1.*t33860*t44161;
  t44192 = t33820*t44088;
  t44238 = t44183 + t44192;
  t34398 = -0.0216*t34137;
  t34596 = -1.1135*t34199;
  t34718 = t34398 + t34596;
  t44252 = t33820*t44161;
  t44253 = t33860*t44088;
  t44255 = t44252 + t44253;
  t43422 = 0.0233*t26870*t4688*t9938;
  t44520 = -1.*t26870*t35088*t12777;
  t44575 = -1.*t26870*t4688*t27201*t35113;
  t44625 = t44520 + t44575;
  t44485 = t26870*t4688*t35088*t27201;
  t44487 = -1.*t26870*t12777*t35113;
  t44500 = t44485 + t44487;
  t44478 = 0.135*t26870*t4688*t35106*t27201;
  t44484 = 0.135*t26870*t12777*t35113;
  t44506 = 0.135*t35117*t44500;
  t44626 = -0.135*t44625*t35289;
  t44634 = t35115*t44625;
  t44635 = -1.*t44500*t35289;
  t44658 = t44634 + t44635;
  t44673 = t35115*t44500;
  t44679 = t44625*t35289;
  t44681 = t44673 + t44679;
  t44795 = -1.*t26870*t4688*t9938*t36191;
  t44804 = t44681*t36476;
  t44810 = t35813*t44681;
  t44811 = -1.*t26870*t4688*t9938*t36032;
  t44858 = t44810 + t44811;
  t44873 = -1.*t26870*t4688*t9938*t35813;
  t44918 = -1.*t44681*t36032;
  t44930 = t44873 + t44918;
  t45100 = t36970*t44658;
  t45304 = t37094*t44930;
  t45386 = t36928*t44658;
  t45436 = t36865*t44930;
  t45451 = t45386 + t45436;
  t45486 = t36865*t44658;
  t45493 = -1.*t36928*t44930;
  t45498 = t45486 + t45493;
  t45546 = t37526*t45451;
  t45560 = t38850*t45498;
  t45570 = -1.*t37274*t45451;
  t45571 = t37262*t45498;
  t45616 = t45570 + t45571;
  t45637 = t37262*t45451;
  t45641 = t37274*t45498;
  t45669 = t45637 + t45641;
  t45810 = t40516*t45616;
  t45892 = t40576*t45669;
  t45972 = t39980*t45616;
  t45974 = -1.*t40477*t45669;
  t45978 = t45972 + t45974;
  t46039 = t40477*t45616;
  t46043 = t39980*t45669;
  t46048 = t46039 + t46043;
  t46064 = t42115*t46048;
  t46097 = t42316*t45978;
  t42869 = -1.1135*t42855;
  t42926 = 0.0216*t42880;
  t43058 = t42869 + t42926;
  t46099 = -1.*t41903*t46048;
  t46108 = t41609*t45978;
  t46111 = t46099 + t46108;
  t43097 = -0.0216*t42855;
  t43101 = -1.1135*t42880;
  t43212 = t43097 + t43101;
  t46128 = t41609*t46048;
  t46131 = t41903*t45978;
  t46146 = t46128 + t46131;
  t46301 = t26870*t9938*t12777;
  t46302 = -1.*t5230*t27201;
  t46303 = t46301 + t46302;
  t46266 = t9938*t5230;
  t46272 = t26870*t12777*t27201;
  t46292 = t46266 + t46272;
  t46304 = -0.135*t29018*t46303;
  t46321 = -0.135*t28951*t29120*t46303;
  t46331 = -0.135*t28886*t29299*t46303;
  t46333 = -1.*t29035*t28886*t46303;
  t46334 = -1.*t28951*t29299*t46303;
  t46340 = t46333 + t46334;
  t46345 = t28951*t29035*t46303;
  t46347 = -1.*t28886*t29299*t46303;
  t46348 = t46345 + t46347;
  t46371 = t31749*t46292;
  t46394 = t31794*t46348;
  t46395 = t31739*t46292;
  t46397 = t31525*t46348;
  t46402 = t46395 + t46397;
  t46416 = t31525*t46292;
  t46418 = -1.*t31739*t46348;
  t46421 = t46416 + t46418;
  t46431 = t32518*t46340;
  t46438 = t32756*t46421;
  t46439 = t32441*t46340;
  t46458 = t32335*t46421;
  t46460 = t46439 + t46458;
  t46467 = t32335*t46340;
  t46469 = -1.*t32441*t46421;
  t46470 = t46467 + t46469;
  t46492 = t33262*t46460;
  t46494 = t33299*t46470;
  t46498 = -1.*t33234*t46460;
  t46514 = t33006*t46470;
  t46533 = t46498 + t46514;
  t46549 = t33006*t46460;
  t46550 = t33234*t46470;
  t46578 = t46549 + t46550;
  t46613 = t33590*t46533;
  t46621 = t33756*t46578;
  t46689 = t33555*t46533;
  t46691 = -1.*t33582*t46578;
  t46694 = t46689 + t46691;
  t46776 = t33582*t46533;
  t46811 = t33555*t46578;
  t46823 = t46776 + t46811;
  t46827 = t33929*t46823;
  t46831 = t33994*t46694;
  t46832 = -1.*t33860*t46823;
  t46834 = t33820*t46694;
  t46842 = t46832 + t46834;
  t46850 = t33820*t46823;
  t46854 = t33860*t46694;
  t46869 = t46850 + t46854;
  t46332 = -0.0233*t46292;
  t47055 = 0.135*t35106*t46303;
  t47057 = 0.135*t35088*t35117*t46303;
  t47058 = 0.135*t46303*t35113*t35289;
  t47059 = -1.*t35115*t46303*t35113;
  t47077 = -1.*t35088*t46303*t35289;
  t47120 = t47059 + t47077;
  t47137 = t35088*t35115*t46303;
  t47142 = -1.*t46303*t35113*t35289;
  t47143 = t47137 + t47142;
  t47174 = t46292*t36191;
  t47177 = t47143*t36476;
  t47178 = t35813*t47143;
  t47220 = t46292*t36032;
  t47232 = t47178 + t47220;
  t47315 = t35813*t46292;
  t47337 = -1.*t47143*t36032;
  t47358 = t47315 + t47337;
  t47432 = t36970*t47120;
  t47448 = t37094*t47358;
  t47489 = t36928*t47120;
  t47505 = t36865*t47358;
  t47569 = t47489 + t47505;
  t47809 = t36865*t47120;
  t47882 = -1.*t36928*t47358;
  t47907 = t47809 + t47882;
  t48045 = t37526*t47569;
  t48061 = t38850*t47907;
  t48075 = -1.*t37274*t47569;
  t48076 = t37262*t47907;
  t48105 = t48075 + t48076;
  t48125 = t37262*t47569;
  t48126 = t37274*t47907;
  t48149 = t48125 + t48126;
  t48229 = t40516*t48105;
  t48233 = t40576*t48149;
  t48253 = t39980*t48105;
  t48255 = -1.*t40477*t48149;
  t48257 = t48253 + t48255;
  t48284 = t40477*t48105;
  t48285 = t39980*t48149;
  t48286 = t48284 + t48285;
  t48318 = t42115*t48286;
  t48344 = t42316*t48257;
  t48345 = -1.*t41903*t48286;
  t48360 = t41609*t48257;
  t48373 = t48345 + t48360;
  t48379 = t41609*t48286;
  t48382 = t41903*t48257;
  t48386 = t48379 + t48382;
  t48516 = t26870*t4688*t35088;
  t48534 = -1.*t46292*t35113;
  t48535 = t48516 + t48534;
  t48590 = -1.*t35088*t46292;
  t48597 = -1.*t26870*t4688*t35113;
  t48602 = t48590 + t48597;
  t48513 = -0.135*t26870*t4688*t35088;
  t48515 = 0.135*t46292*t35113;
  t48561 = 0.135*t35117*t48535;
  t48608 = -0.135*t48602*t35289;
  t48632 = t35115*t48535;
  t48637 = t48602*t35289;
  t48638 = t48632 + t48637;
  t48642 = t35115*t48602;
  t48643 = -1.*t48535*t35289;
  t48644 = t48642 + t48643;
  t48659 = t48638*t36476;
  t48665 = t36970*t48644;
  t48667 = -1.*t37094*t48638*t36032;
  t48695 = t36928*t48644;
  t48705 = -1.*t36865*t48638*t36032;
  t48770 = t48695 + t48705;
  t48809 = t36865*t48644;
  t48830 = t36928*t48638*t36032;
  t48831 = t48809 + t48830;
  t48844 = t37526*t48770;
  t48846 = t38850*t48831;
  t48847 = -1.*t37274*t48770;
  t48865 = t37262*t48831;
  t48879 = t48847 + t48865;
  t48909 = t37262*t48770;
  t48970 = t37274*t48831;
  t48974 = t48909 + t48970;
  t49049 = t40516*t48879;
  t49051 = t40576*t48974;
  t49183 = t39980*t48879;
  t49195 = -1.*t40477*t48974;
  t49238 = t49183 + t49195;
  t49320 = t40477*t48879;
  t49336 = t39980*t48974;
  t49338 = t49320 + t49336;
  t49342 = t42115*t49338;
  t49371 = t42316*t49238;
  t49372 = -1.*t41903*t49338;
  t49379 = t41609*t49238;
  t49426 = t49372 + t49379;
  t49436 = t41609*t49338;
  t49437 = t41903*t49238;
  t49442 = t49436 + t49437;
  t49671 = t35088*t46292;
  t49695 = t26870*t4688*t35113;
  t49732 = t49671 + t49695;
  t49663 = -0.135*t35115*t48535;
  t49765 = 0.135*t49732*t35289;
  t49774 = -1.*t49732*t35289;
  t49809 = t48632 + t49774;
  t49814 = -1.*t35115*t49732;
  t49815 = t49814 + t48643;
  t49887 = t49809*t36476;
  t49984 = t36970*t49815;
  t49985 = -1.*t37094*t49809*t36032;
  t49986 = t36928*t49815;
  t49996 = -1.*t36865*t49809*t36032;
  t50002 = t49986 + t49996;
  t50062 = t36865*t49815;
  t50063 = t36928*t49809*t36032;
  t50065 = t50062 + t50063;
  t50182 = t37526*t50002;
  t50247 = t38850*t50065;
  t50268 = -1.*t37274*t50002;
  t50271 = t37262*t50065;
  t50275 = t50268 + t50271;
  t50283 = t37262*t50002;
  t50288 = t37274*t50065;
  t50327 = t50283 + t50288;
  t50477 = t40516*t50275;
  t50478 = t40576*t50327;
  t50534 = t39980*t50275;
  t50543 = -1.*t40477*t50327;
  t50560 = t50534 + t50543;
  t50643 = t40477*t50275;
  t50660 = t39980*t50327;
  t50665 = t50643 + t50660;
  t50668 = t42115*t50665;
  t50673 = t42316*t50560;
  t50688 = -1.*t41903*t50665;
  t50693 = t41609*t50560;
  t50694 = t50688 + t50693;
  t50699 = t41609*t50665;
  t50703 = t41903*t50560;
  t50718 = t50699 + t50703;
  t50932 = t35115*t49732;
  t50949 = t48535*t35289;
  t50963 = t50932 + t50949;
  t50864 = -1.*t26870*t9938*t12777;
  t50869 = t5230*t27201;
  t50870 = t50864 + t50869;
  t50877 = -0.135*t35813;
  t50882 = t50877 + t36469;
  t50899 = t50870*t50882;
  t50979 = -0.049*t35813;
  t50986 = 0.135*t36032;
  t50987 = t50979 + t50986;
  t50991 = t50963*t50987;
  t50992 = -1.*t35813*t50963;
  t50993 = -1.*t50870*t36032;
  t50994 = t50992 + t50993;
  t51001 = t35813*t50870;
  t51032 = -1.*t50963*t36032;
  t51033 = t51001 + t51032;
  t51063 = t37094*t50994;
  t51069 = t36865*t37526*t50994;
  t51094 = -1.*t36928*t38850*t50994;
  t51120 = -1.*t37262*t36928*t50994;
  t51121 = -1.*t36865*t37274*t50994;
  t51122 = t51120 + t51121;
  t51124 = t36865*t37262*t50994;
  t51137 = -1.*t36928*t37274*t50994;
  t51138 = t51124 + t51137;
  t51180 = t40516*t51122;
  t51185 = t40576*t51138;
  t51203 = t39980*t51122;
  t51204 = -1.*t40477*t51138;
  t51205 = t51203 + t51204;
  t51243 = t40477*t51122;
  t51247 = t39980*t51138;
  t51253 = t51243 + t51247;
  t51258 = t42115*t51253;
  t51266 = t42316*t51205;
  t51267 = -1.*t41903*t51253;
  t51268 = t41609*t51205;
  t51274 = t51267 + t51268;
  t51285 = t41609*t51253;
  t51287 = t41903*t51205;
  t51288 = t51285 + t51287;
  t51417 = 0.049*t36865;
  t51418 = t51417 + t37063;
  t51450 = t51418*t49809;
  t51475 = -0.09*t36865;
  t51509 = -0.049*t36928;
  t51514 = t51475 + t51509;
  t51517 = t51514*t51033;
  t51520 = -1.*t36928*t49809;
  t51521 = -1.*t36865*t51033;
  t51523 = t51520 + t51521;
  t51527 = t36865*t49809;
  t51528 = -1.*t36928*t51033;
  t51530 = t51527 + t51528;
  t51535 = t38850*t51523;
  t51585 = t37526*t51530;
  t51600 = t37274*t51523;
  t51604 = t37262*t51530;
  t51606 = t51600 + t51604;
  t51636 = t37262*t51523;
  t51648 = -1.*t37274*t51530;
  t51649 = t51636 + t51648;
  t51703 = t40576*t51606;
  t51704 = t40516*t51649;
  t51708 = -1.*t40477*t51606;
  t51709 = t39980*t51649;
  t51711 = t51708 + t51709;
  t51732 = t39980*t51606;
  t51733 = t40477*t51649;
  t51738 = t51732 + t51733;
  t51725 = t42316*t51711;
  t51753 = t42115*t51738;
  t51755 = t41903*t51711;
  t51756 = t41609*t51738;
  t51766 = t51755 + t51756;
  t51775 = t41609*t51711;
  t51776 = -1.*t41903*t51738;
  t51777 = t51775 + t51776;
  t51894 = t36928*t49809;
  t51906 = t36865*t51033;
  t51910 = t51894 + t51906;
  t51866 = -0.21*t37262;
  t51891 = -0.049*t37274;
  t51893 = t51866 + t51891;
  t51912 = t51893*t51910;
  t51914 = 0.049*t37262;
  t51926 = t51914 + t37282;
  t51936 = t51926*t51530;
  t51944 = -1.*t37274*t51910;
  t51945 = t51944 + t51604;
  t51967 = -1.*t37262*t51910;
  t51969 = t51967 + t51648;
  t51985 = t40576*t51945;
  t52000 = t40516*t51969;
  t52009 = -1.*t40477*t51945;
  t52010 = t39980*t51969;
  t52011 = t52009 + t52010;
  t52047 = t39980*t51945;
  t52048 = t40477*t51969;
  t52054 = t52047 + t52048;
  t52046 = t42316*t52011;
  t52055 = t42115*t52054;
  t52056 = t41903*t52011;
  t52057 = t41609*t52054;
  t52061 = t52056 + t52057;
  t52069 = t41609*t52011;
  t52082 = -1.*t41903*t52054;
  t52086 = t52069 + t52082;
  t52136 = t37262*t51910;
  t52137 = t37274*t51530;
  t52138 = t52136 + t52137;
  t52034 = -1.*t39980*t51945;
  t52120 = 0.0016*t39980;
  t52121 = t52120 + t40551;
  t52122 = t52121*t51945;
  t52123 = -0.2707*t39980;
  t52130 = -0.0016*t40477;
  t52135 = t52123 + t52130;
  t52142 = t52135*t52138;
  t52143 = -1.*t39980*t52138;
  t52144 = t52009 + t52143;
  t52161 = -1.*t40477*t52138;
  t52162 = t52047 + t52161;
  t52160 = t42316*t52144;
  t52163 = t42115*t52162;
  t52165 = t41903*t52144;
  t52166 = t41609*t52162;
  t52167 = t52165 + t52166;
  t52169 = t41609*t52144;
  t52174 = -1.*t41903*t52162;
  t52175 = t52169 + t52174;
  t52281 = t40477*t51945;
  t52285 = t39980*t52138;
  t52287 = t52281 + t52285;
  t52248 = -0.7055*t41609;
  t52249 = 0.0184*t41903;
  t52257 = t52248 + t52249;
  t52288 = t52257*t52287;
  t52289 = -0.0184*t41609;
  t52294 = t52289 + t41922;
  t52328 = t52294*t52162;
  t52336 = -1.*t41903*t52287;
  t52343 = t52336 + t52166;
  t52351 = -1.*t41609*t52287;
  t52368 = t52351 + t52174;
  t52455 = -1.*t42880*t52343;
  t52547 = t41609*t52287;
  t52548 = t41903*t52162;
  t52549 = t52547 + t52548;
  t52472 = t42716*t52343;
  t52578 = -1.*t26870*t4688*t28886;
  t52579 = -1.*t28951*t46292;
  t52592 = t52578 + t52579;
  t52618 = t28951*t26870*t4688;
  t52619 = -1.*t28886*t46292;
  t52620 = t52618 + t52619;
  t52667 = t29299*t52592;
  t52672 = t29035*t52620;
  t52673 = t52667 + t52672;
  t52575 = 0.135*t28951*t26870*t4688;
  t52577 = -0.135*t28886*t46292;
  t52594 = 0.135*t29299*t52592;
  t52659 = -0.135*t29120*t52620;
  t52680 = t29035*t52592;
  t52686 = -1.*t29299*t52620;
  t52687 = t52680 + t52686;
  t52678 = t31794*t52673;
  t52788 = -1.*t31739*t32756*t52673;
  t52793 = t32518*t52687;
  t52795 = t31739*t32441*t52673;
  t52796 = t32335*t52687;
  t52797 = t52795 + t52796;
  t52801 = -1.*t32335*t31739*t52673;
  t52802 = t32441*t52687;
  t52823 = t52801 + t52802;
  t52830 = t33299*t52797;
  t52834 = t33262*t52823;
  t52844 = t33234*t52797;
  t52848 = t33006*t52823;
  t52849 = t52844 + t52848;
  t52853 = t33006*t52797;
  t52854 = -1.*t33234*t52823;
  t52855 = t52853 + t52854;
  t52868 = t33756*t52849;
  t52869 = t33590*t52855;
  t52871 = -1.*t33582*t52849;
  t52875 = t33555*t52855;
  t52876 = t52871 + t52875;
  t52895 = t33555*t52849;
  t52896 = t33582*t52855;
  t52897 = t52895 + t52896;
  t52885 = t33994*t52876;
  t52898 = t33929*t52897;
  t52902 = t33860*t52876;
  t52903 = t33820*t52897;
  t52904 = t52902 + t52903;
  t52906 = t33820*t52876;
  t52907 = -1.*t33860*t52897;
  t52908 = t52906 + t52907;
  t52958 = t26870*t4688*t28886;
  t52959 = t28951*t46292;
  t52960 = t52958 + t52959;
  t52965 = -1.*t29299*t52960;
  t52966 = t52965 + t52672;
  t52963 = -0.135*t29299*t52960;
  t52964 = 0.135*t29035*t52620;
  t52985 = -1.*t29035*t52960;
  t52987 = t52985 + t52686;
  t52974 = t31794*t52966;
  t53007 = -1.*t31739*t32756*t52966;
  t53008 = t32518*t52987;
  t53009 = t31739*t32441*t52966;
  t53010 = t32335*t52987;
  t53011 = t53009 + t53010;
  t53023 = -1.*t32335*t31739*t52966;
  t53024 = t32441*t52987;
  t53027 = t53023 + t53024;
  t53035 = t33299*t53011;
  t53042 = t33262*t53027;
  t53044 = t33234*t53011;
  t53045 = t33006*t53027;
  t53046 = t53044 + t53045;
  t53049 = t33006*t53011;
  t53050 = -1.*t33234*t53027;
  t53051 = t53049 + t53050;
  t53057 = t33756*t53046;
  t53058 = t33590*t53051;
  t53059 = -1.*t33582*t53046;
  t53060 = t33555*t53051;
  t53061 = t53059 + t53060;
  t53088 = t33555*t53046;
  t53089 = t33582*t53051;
  t53091 = t53088 + t53089;
  t53087 = t33994*t53061;
  t53092 = t33929*t53091;
  t53095 = t33860*t53061;
  t53096 = t33820*t53091;
  t53098 = t53095 + t53096;
  t53101 = t33820*t53061;
  t53102 = -1.*t33860*t53091;
  t53103 = t53101 + t53102;
  t53156 = t29035*t52960;
  t53157 = t29299*t52620;
  t53158 = t53156 + t53157;
  t53160 = -1.*t31739*t50870;
  t53161 = -1.*t31525*t53158;
  t53162 = t53160 + t53161;
  t53144 = 0.135*t31525;
  t53145 = t53144 + t31781;
  t53146 = t53145*t50870;
  t53150 = -0.049*t31525;
  t53154 = -0.135*t31739;
  t53155 = t53150 + t53154;
  t53159 = t53155*t53158;
  t53166 = t31525*t50870;
  t53167 = -1.*t31739*t53158;
  t53168 = t53166 + t53167;
  t53164 = t32756*t53162;
  t53180 = t32335*t33262*t53162;
  t53181 = -1.*t32441*t33299*t53162;
  t53183 = -1.*t33006*t32441*t53162;
  t53184 = -1.*t32335*t33234*t53162;
  t53185 = t53183 + t53184;
  t53187 = t32335*t33006*t53162;
  t53188 = -1.*t32441*t33234*t53162;
  t53189 = t53187 + t53188;
  t53195 = t33590*t53185;
  t53196 = t33756*t53189;
  t53201 = t33555*t53185;
  t53202 = -1.*t33582*t53189;
  t53204 = t53201 + t53202;
  t53210 = t33582*t53185;
  t53211 = t33555*t53189;
  t53212 = t53210 + t53211;
  t53213 = t33929*t53212;
  t53214 = t33994*t53204;
  t53215 = -1.*t33860*t53212;
  t53216 = t33820*t53204;
  t53217 = t53215 + t53216;
  t53225 = t33820*t53212;
  t53226 = t33860*t53204;
  t53227 = t53225 + t53226;
  t53252 = 0.049*t32335;
  t53254 = t53252 + t32753;
  t53255 = t53254*t52966;
  t53256 = -0.09*t32335;
  t53259 = -0.049*t32441;
  t53260 = t53256 + t53259;
  t53261 = t53260*t53168;
  t53262 = -1.*t32441*t52966;
  t53264 = -1.*t32335*t53168;
  t53265 = t53262 + t53264;
  t53267 = t32335*t52966;
  t53268 = -1.*t32441*t53168;
  t53271 = t53267 + t53268;
  t53277 = t33299*t53265;
  t53278 = t33262*t53271;
  t53281 = t33234*t53265;
  t53282 = t33006*t53271;
  t53283 = t53281 + t53282;
  t53285 = t33006*t53265;
  t53287 = -1.*t33234*t53271;
  t53288 = t53285 + t53287;
  t53293 = t33756*t53283;
  t53294 = t33590*t53288;
  t53295 = -1.*t33582*t53283;
  t53296 = t33555*t53288;
  t53297 = t53295 + t53296;
  t53309 = t33555*t53283;
  t53310 = t33582*t53288;
  t53311 = t53309 + t53310;
  t53306 = t33994*t53297;
  t53312 = t33929*t53311;
  t53313 = t33860*t53297;
  t53315 = t33820*t53311;
  t53316 = t53313 + t53315;
  t53318 = t33820*t53297;
  t53321 = -1.*t33860*t53311;
  t53322 = t53318 + t53321;
  t53351 = t32441*t52966;
  t53352 = t32335*t53168;
  t53354 = t53351 + t53352;
  t53348 = -0.21*t33006;
  t53349 = -0.049*t33234;
  t53350 = t53348 + t53349;
  t53355 = t53350*t53354;
  t53358 = 0.049*t33006;
  t53359 = t53358 + t33257;
  t53360 = t53359*t53271;
  t53363 = -1.*t33234*t53354;
  t53365 = t53363 + t53282;
  t53367 = -1.*t33006*t53354;
  t53368 = t53367 + t53287;
  t53374 = t33756*t53365;
  t53375 = t33590*t53368;
  t53376 = -1.*t33582*t53365;
  t53377 = t33555*t53368;
  t53378 = t53376 + t53377;
  t53389 = t33555*t53365;
  t53391 = t33582*t53368;
  t53393 = t53389 + t53391;
  t53388 = t33994*t53378;
  t53394 = t33929*t53393;
  t53395 = t33860*t53378;
  t53396 = t33820*t53393;
  t53397 = t53395 + t53396;
  t53399 = t33820*t53378;
  t53401 = -1.*t33860*t53393;
  t53402 = t53399 + t53401;
  t53432 = t33006*t53354;
  t53433 = t33234*t53271;
  t53434 = t53432 + t53433;
  t53380 = -1.*t33555*t53365;
  t53422 = 0.0016*t33555;
  t53423 = t53422 + t33745;
  t53424 = t53423*t53365;
  t53425 = -0.2707*t33555;
  t53426 = -0.0016*t33582;
  t53427 = t53425 + t53426;
  t53435 = t53427*t53434;
  t53436 = -1.*t33555*t53434;
  t53437 = t53376 + t53436;
  t53452 = -1.*t33582*t53434;
  t53454 = t53389 + t53452;
  t53450 = t33994*t53437;
  t53455 = t33929*t53454;
  t53456 = t33860*t53437;
  t53458 = t33820*t53454;
  t53459 = t53456 + t53458;
  t53461 = t33820*t53437;
  t53462 = -1.*t33860*t53454;
  t53463 = t53461 + t53462;
  t53484 = t33582*t53365;
  t53485 = t33555*t53434;
  t53486 = t53484 + t53485;
  t53481 = -0.7055*t33820;
  t53482 = 0.0184*t33860;
  t53483 = t53481 + t53482;
  t53487 = t53483*t53486;
  t53488 = -0.0184*t33820;
  t53489 = t53488 + t33916;
  t53490 = t53489*t53454;
  t53491 = -1.*t33860*t53486;
  t53492 = t53491 + t53458;
  t53494 = -1.*t33820*t53486;
  t53495 = t53494 + t53462;
  t53504 = -1.*t34199*t53492;
  t53530 = t33820*t53486;
  t53532 = t33860*t53454;
  t53533 = t53530 + t53532;
  t53510 = t34115*t53492;
  p_output1[0]=0;
  p_output1[1]=0;
  p_output1[2]=-312.78204;
  p_output1[3]=-17.854200000000002*(t28901 + t28950 + t29033 + t29298 + t29319 + 0.0179*t29347 - 0.1351*t31392) - 11.4777*(t28901 + t29033 + t29298 + t29319 - 0.0343*t29347 + t31750 + t31878 - 0.135*t32039 - 0.049*t32249) - 54.151199999999996*(t28901 + t29033 + t29298 + t29319 + t31750 + t31878 - 0.1708*t32039 + t32610 + t32765 - 0.0489*t32841 - 0.1498*t32889) - 7.435980000000001*(t28901 + t29033 + t29298 + t29319 + t31750 + t31878 - 0.1327*t32039 + t32610 + t32765 + t33263 + t33316 - 0.233*t33379 - 0.0169*t33477) - 5.6603699999999995*(t28901 + t29033 + t29298 + t29319 + t31750 + t31878 - 0.1303*t32039 + t32610 + t32765 + t33263 + t33316 + 0.0004*(-1.*t33477*t33555 - 1.*t33379*t33582) + t33591 + t33759 - 0.4541*t33801) - 7.67142*(t28901 + t29033 + t29298 + t29319 + t31750 + t31878 - 0.1318*t32039 + t32610 + t32765 + t33263 + t33316 + t33591 + t33759 + t33968 + t33995 - 0.816*t34010 - 0.0122*t34017) - 1.4715*(t28901 + t29033 + t29298 + t29319 + t31750 + t31878 - 0.1306*t32039 + t32610 + t32765 + t33263 + t33316 + t33591 + t33759 + t33968 + t33995 + 0.0059*(t34017*t34115 + t34010*t34199) - 1.1182*(t34010*t34115 - 1.*t34017*t34199) + t34010*t34297 + t34017*t34718) - 17.854200000000002*(t28950 + t35112 + t35114 + t35177 + t35302 + 0.0179*t35627 + 0.1351*t35635) - 11.4777*(t35112 + t35114 + t35177 + t35302 - 0.0343*t35627 + t36466 + t36526 + 0.135*t36625 - 0.049*t36653) - 54.151199999999996*(t35112 + t35114 + t35177 + t35302 + t36466 + t36526 + 0.1708*t36625 + t36976 + t37095 - 0.0489*t37107 - 0.1498*t37142) - 7.435980000000001*(t35112 + t35114 + t35177 + t35302 + t36466 + t36526 + 0.1327*t36625 + t36976 + t37095 + t37812 + t39192 - 0.233*t39237 - 0.0169*t39717) - 5.6603699999999995*(t35112 + t35114 + t35177 + t35302 + t36466 + t36526 + 0.1303*t36625 + t36976 + t37095 + t37812 + t39192 + 0.0004*(-1.*t39717*t39980 - 1.*t39237*t40477) + t40543 + t40720 - 0.4541*t41069) - 7.67142*(t35112 + t35114 + t35177 + t35302 + t36466 + t36526 + 0.1318*t36625 + t36976 + t37095 + t37812 + t39192 + t40543 + t40720 + t42224 + t42319 - 0.816*t42324 - 0.0122*t42451) - 1.4715*(t35112 + t35114 + t35177 + t35302 + t36466 + t36526 + 0.1306*t36625 + t36976 + t37095 + t37812 + t39192 + t40543 + t40720 + t42224 + t42319 + 0.0059*(t42451*t42716 + t42324*t42880) - 1.1182*(t42324*t42716 - 1.*t42451*t42880) + t42324*t43058 + t42451*t43212) - 101.3373*(0.0507*t28574 - 0.0284*t4688*t5230);
  p_output1[4]=-17.854200000000002*(t43422 + t43435 + t43444 + t43465 + t43493 + 0.0179*t43562 - 0.1351*t43624) - 11.4777*(t43435 + t43444 + t43465 + t43493 - 0.0343*t43562 + t43674 + t43693 - 0.135*t43772 - 0.049*t43800) - 54.151199999999996*(t43435 + t43444 + t43465 + t43493 + t43674 + t43693 - 0.1708*t43772 + t43824 + t43836 - 0.0489*t43850 - 0.1498*t43895) - 7.435980000000001*(t43435 + t43444 + t43465 + t43493 + t43674 + t43693 - 0.1327*t43772 + t43824 + t43836 + t43910 + t43913 - 0.233*t43933 - 0.0169*t44013) - 5.6603699999999995*(t43435 + t43444 + t43465 + t43493 + t43674 + t43693 - 0.1303*t43772 + t43824 + t43836 + t43910 + t43913 + 0.0004*(-1.*t33582*t43933 - 1.*t33555*t44013) + t44073 + t44076 - 0.4541*t44088) - 7.67142*(t43435 + t43444 + t43465 + t43493 + t43674 + t43693 - 0.1318*t43772 + t43824 + t43836 + t43910 + t43913 + t44073 + t44076 + t44176 + t44179 - 0.816*t44238 - 0.0122*t44255) - 1.4715*(t43435 + t43444 + t43465 + t43493 + t43674 + t43693 - 0.1306*t43772 + t43824 + t43836 + t43910 + t43913 + t44073 + t44076 + t44176 + t44179 + t34297*t44238 + t34718*t44255 + 0.0059*(t34199*t44238 + t34115*t44255) - 1.1182*(t34115*t44238 - 1.*t34199*t44255)) - 17.854200000000002*(t43422 + t44478 + t44484 + t44506 + t44626 + 0.0179*t44658 + 0.1351*t44681) - 11.4777*(t44478 + t44484 + t44506 + t44626 - 0.0343*t44658 + t44795 + t44804 + 0.135*t44858 - 0.049*t44930) - 54.151199999999996*(t44478 + t44484 + t44506 + t44626 + t44795 + t44804 + 0.1708*t44858 + t45100 + t45304 - 0.0489*t45451 - 0.1498*t45498) - 7.435980000000001*(t44478 + t44484 + t44506 + t44626 + t44795 + t44804 + 0.1327*t44858 + t45100 + t45304 + t45546 + t45560 - 0.233*t45616 - 0.0169*t45669) - 5.6603699999999995*(t44478 + t44484 + t44506 + t44626 + t44795 + t44804 + 0.1303*t44858 + t45100 + t45304 + t45546 + t45560 + 0.0004*(-1.*t40477*t45616 - 1.*t39980*t45669) + t45810 + t45892 - 0.4541*t45978) - 7.67142*(t44478 + t44484 + t44506 + t44626 + t44795 + t44804 + 0.1318*t44858 + t45100 + t45304 + t45546 + t45560 + t45810 + t45892 + t46064 + t46097 - 0.816*t46111 - 0.0122*t46146) - 1.4715*(t44478 + t44484 + t44506 + t44626 + t44795 + t44804 + 0.1306*t44858 + t45100 + t45304 + t45546 + t45560 + t45810 + t45892 + t46064 + t46097 + t43058*t46111 + t43212*t46146 + 0.0059*(t42880*t46111 + t42716*t46146) - 1.1182*(t42716*t46111 - 1.*t42880*t46146)) - 101.3373*(-0.0284*t12777*t26870 - 0.0507*t26870*t4688*t9938);
  p_output1[5]=-5.13780111*t46292 - 17.854200000000002*(t46304 + t46321 + t46331 + t46332 + 0.0179*t46340 - 0.1351*t46348) - 11.4777*(t46304 + t46321 + t46331 - 0.0343*t46340 + t46371 + t46394 - 0.135*t46402 - 0.049*t46421) - 54.151199999999996*(t46304 + t46321 + t46331 + t46371 + t46394 - 0.1708*t46402 + t46431 + t46438 - 0.0489*t46460 - 0.1498*t46470) - 7.435980000000001*(t46304 + t46321 + t46331 + t46371 + t46394 - 0.1327*t46402 + t46431 + t46438 + t46492 + t46494 - 0.233*t46533 - 0.0169*t46578) - 5.6603699999999995*(t46304 + t46321 + t46331 + t46371 + t46394 - 0.1303*t46402 + t46431 + t46438 + t46492 + t46494 + 0.0004*(-1.*t33582*t46533 - 1.*t33555*t46578) + t46613 + t46621 - 0.4541*t46694) - 7.67142*(t46304 + t46321 + t46331 + t46371 + t46394 - 0.1318*t46402 + t46431 + t46438 + t46492 + t46494 + t46613 + t46621 + t46827 + t46831 - 0.816*t46842 - 0.0122*t46869) - 1.4715*(t46304 + t46321 + t46331 + t46371 + t46394 - 0.1306*t46402 + t46431 + t46438 + t46492 + t46494 + t46613 + t46621 + t46827 + t46831 + t34297*t46842 + t34718*t46869 + 0.0059*(t34199*t46842 + t34115*t46869) - 1.1182*(t34115*t46842 - 1.*t34199*t46869)) - 17.854200000000002*(t46332 + t47055 + t47057 + t47058 + 0.0179*t47120 + 0.1351*t47143) - 11.4777*(t47055 + t47057 + t47058 - 0.0343*t47120 + t47174 + t47177 + 0.135*t47232 - 0.049*t47358) - 54.151199999999996*(t47055 + t47057 + t47058 + t47174 + t47177 + 0.1708*t47232 + t47432 + t47448 - 0.0489*t47569 - 0.1498*t47907) - 7.435980000000001*(t47055 + t47057 + t47058 + t47174 + t47177 + 0.1327*t47232 + t47432 + t47448 + t48045 + t48061 - 0.233*t48105 - 0.0169*t48149) - 5.6603699999999995*(t47055 + t47057 + t47058 + t47174 + t47177 + 0.1303*t47232 + t47432 + t47448 + t48045 + t48061 + 0.0004*(-1.*t40477*t48105 - 1.*t39980*t48149) + t48229 + t48233 - 0.4541*t48257) - 7.67142*(t47055 + t47057 + t47058 + t47174 + t47177 + 0.1318*t47232 + t47432 + t47448 + t48045 + t48061 + t48229 + t48233 + t48318 + t48344 - 0.816*t48373 - 0.0122*t48386) - 1.4715*(t47055 + t47057 + t47058 + t47174 + t47177 + 0.1306*t47232 + t47432 + t47448 + t48045 + t48061 + t48229 + t48233 + t48318 + t48344 + t43058*t48373 + t43212*t48386 + 0.0059*(t42880*t48373 + t42716*t48386) - 1.1182*(t42716*t48373 - 1.*t42880*t48386));
  p_output1[6]=-17.854200000000002*(t48513 + t48515 + t48561 + t48608 + 0.1351*t48638 + 0.0179*t48644) - 11.4777*(t48513 + t48515 + t48561 + t48608 + 0.135*t35813*t48638 + 0.049*t36032*t48638 - 0.0343*t48644 + t48659) - 54.151199999999996*(t48513 + t48515 + t48561 + t48608 + 0.1708*t35813*t48638 + t48659 + t48665 + t48667 - 0.0489*t48770 - 0.1498*t48831) - 7.435980000000001*(t48513 + t48515 + t48561 + t48608 + 0.1327*t35813*t48638 + t48659 + t48665 + t48667 + t48844 + t48846 - 0.233*t48879 - 0.0169*t48974) - 5.6603699999999995*(t48513 + t48515 + t48561 + t48608 + 0.1303*t35813*t48638 + t48659 + t48665 + t48667 + t48844 + t48846 + 0.0004*(-1.*t40477*t48879 - 1.*t39980*t48974) + t49049 + t49051 - 0.4541*t49238) - 7.67142*(t48513 + t48515 + t48561 + t48608 + 0.1318*t35813*t48638 + t48659 + t48665 + t48667 + t48844 + t48846 + t49049 + t49051 + t49342 + t49371 - 0.816*t49426 - 0.0122*t49442) - 1.4715*(t48513 + t48515 + t48561 + t48608 + 0.1306*t35813*t48638 + t48659 + t48665 + t48667 + t48844 + t48846 + t49049 + t49051 + t49342 + t49371 + t43058*t49426 + t43212*t49442 + 0.0059*(t42880*t49426 + t42716*t49442) - 1.1182*(t42716*t49426 - 1.*t42880*t49442));
  p_output1[7]=-17.854200000000002*(t49663 + t49765 + 0.1351*t49809 + 0.0179*t49815) - 11.4777*(t49663 + t49765 + 0.135*t35813*t49809 + 0.049*t36032*t49809 - 0.0343*t49815 + t49887) - 54.151199999999996*(t49663 + t49765 + 0.1708*t35813*t49809 + t49887 + t49984 + t49985 - 0.0489*t50002 - 0.1498*t50065) - 7.435980000000001*(t49663 + t49765 + 0.1327*t35813*t49809 + t49887 + t49984 + t49985 + t50182 + t50247 - 0.233*t50275 - 0.0169*t50327) - 5.6603699999999995*(t49663 + t49765 + 0.1303*t35813*t49809 + t49887 + t49984 + t49985 + t50182 + t50247 + 0.0004*(-1.*t40477*t50275 - 1.*t39980*t50327) + t50477 + t50478 - 0.4541*t50560) - 7.67142*(t49663 + t49765 + 0.1318*t35813*t49809 + t49887 + t49984 + t49985 + t50182 + t50247 + t50477 + t50478 + t50668 + t50673 - 0.816*t50694 - 0.0122*t50718) - 1.4715*(t49663 + t49765 + 0.1306*t35813*t49809 + t49887 + t49984 + t49985 + t50182 + t50247 + t50477 + t50478 + t50668 + t50673 + t43058*t50694 + t43212*t50718 + 0.0059*(t42880*t50694 + t42716*t50718) - 1.1182*(t42716*t50694 - 1.*t42880*t50718));
  p_output1[8]=-11.4777*(t50899 + t50991 - 0.049*t50994 + 0.135*t51033) - 54.151199999999996*(t50899 + t50991 - 0.0489*t36865*t50994 + 0.1498*t36928*t50994 + 0.1708*t51033 + t51063) - 7.435980000000001*(t50899 + t50991 + 0.1327*t51033 + t51063 + t51069 + t51094 - 0.233*t51122 - 0.0169*t51138) - 5.6603699999999995*(t50899 + t50991 + 0.1303*t51033 + t51063 + t51069 + t51094 + 0.0004*(-1.*t40477*t51122 - 1.*t39980*t51138) + t51180 + t51185 - 0.4541*t51205) - 7.67142*(t50899 + t50991 + 0.1318*t51033 + t51063 + t51069 + t51094 + t51180 + t51185 + t51258 + t51266 - 0.816*t51274 - 0.0122*t51288) - 1.4715*(t50899 + t50991 + 0.1306*t51033 + t51063 + t51069 + t51094 + t51180 + t51185 + t51258 + t51266 + t43058*t51274 + t43212*t51288 + 0.0059*(t42880*t51274 + t42716*t51288) - 1.1182*(t42716*t51274 - 1.*t42880*t51288));
  p_output1[9]=-54.151199999999996*(t51450 + t51517 - 0.1498*t51523 - 0.0489*t51530) - 7.435980000000001*(t51450 + t51517 + t51535 + t51585 - 0.0169*t51606 - 0.233*t51649) - 5.6603699999999995*(t51450 + t51517 + t51535 + t51585 + 0.0004*(-1.*t39980*t51606 - 1.*t40477*t51649) + t51703 + t51704 - 0.4541*t51711) - 7.67142*(t51450 + t51517 + t51535 + t51585 + t51703 + t51704 + t51725 + t51753 - 0.0122*t51766 - 0.816*t51777) - 1.4715*(t51450 + t51517 + t51535 + t51585 + t51703 + t51704 + t51725 + t51753 + t43212*t51766 + t43058*t51777 - 1.1182*(-1.*t42880*t51766 + t42716*t51777) + 0.0059*(t42716*t51766 + t42880*t51777));
  p_output1[10]=-7.435980000000001*(t51912 + t51936 - 0.0169*t51945 - 0.233*t51969) - 5.6603699999999995*(t51912 + t51936 + t51985 + t52000 - 0.4541*t52011 + 0.0004*(-1.*t40477*t51969 + t52034)) - 7.67142*(t51912 + t51936 + t51985 + t52000 + t52046 + t52055 - 0.0122*t52061 - 0.816*t52086) - 1.4715*(t51912 + t51936 + t51985 + t52000 + t52046 + t52055 + t43212*t52061 + t43058*t52086 - 1.1182*(-1.*t42880*t52061 + t42716*t52086) + 0.0059*(t42716*t52061 + t42880*t52086));
  p_output1[11]=-5.6603699999999995*(t52122 + 0.0004*(t52034 + t40477*t52138) + t52142 - 0.4541*t52144) - 7.67142*(t52122 + t52142 + t52160 + t52163 - 0.0122*t52167 - 0.816*t52175) - 1.4715*(t52122 + t52142 + t52160 + t52163 + t43212*t52167 + t43058*t52175 - 1.1182*(-1.*t42880*t52167 + t42716*t52175) + 0.0059*(t42716*t52167 + t42880*t52175));
  p_output1[12]=-7.67142*(t52288 + t52328 - 0.0122*t52343 - 0.816*t52368) - 1.4715*(t52288 + t52328 + t43212*t52343 + t43058*t52368 - 1.1182*(t42716*t52368 + t52455) + 0.0059*(t42880*t52368 + t52472));
  p_output1[13]=-1.4715*((0.0216*t42716 + t43101)*t52343 + (-1.1135*t42716 - 0.0216*t42880)*t52549 - 1.1182*(t52455 - 1.*t42716*t52549) + 0.0059*(t52472 - 1.*t42880*t52549));
  p_output1[14]=-11.4777*(t52575 + t52577 + t52594 + t52659 - 0.135*t31525*t52673 + 0.049*t31739*t52673 + t52678 - 0.0343*t52687) - 17.854200000000002*(t52575 + t52577 + t52594 + t52659 - 0.1351*t52673 + 0.0179*t52687) - 54.151199999999996*(t52575 + t52577 + t52594 + t52659 - 0.1708*t31525*t52673 + t52678 + t52788 + t52793 - 0.1498*t52797 - 0.0489*t52823) - 7.435980000000001*(t52575 + t52577 + t52594 + t52659 - 0.1327*t31525*t52673 + t52678 + t52788 + t52793 + t52830 + t52834 - 0.0169*t52849 - 0.233*t52855) - 5.6603699999999995*(t52575 + t52577 + t52594 + t52659 - 0.1303*t31525*t52673 + t52678 + t52788 + t52793 + t52830 + t52834 + 0.0004*(-1.*t33555*t52849 - 1.*t33582*t52855) + t52868 + t52869 - 0.4541*t52876) - 7.67142*(t52575 + t52577 + t52594 + t52659 - 0.1318*t31525*t52673 + t52678 + t52788 + t52793 + t52830 + t52834 + t52868 + t52869 + t52885 + t52898 - 0.0122*t52904 - 0.816*t52908) - 1.4715*(t52575 + t52577 + t52594 + t52659 - 0.1306*t31525*t52673 + t52678 + t52788 + t52793 + t52830 + t52834 + t52868 + t52869 + t52885 + t52898 + t34718*t52904 + t34297*t52908 - 1.1182*(-1.*t34199*t52904 + t34115*t52908) + 0.0059*(t34115*t52904 + t34199*t52908));
  p_output1[15]=-11.4777*(t52963 + t52964 - 0.135*t31525*t52966 + 0.049*t31739*t52966 + t52974 - 0.0343*t52987) - 17.854200000000002*(t52963 + t52964 - 0.1351*t52966 + 0.0179*t52987) - 54.151199999999996*(t52963 + t52964 - 0.1708*t31525*t52966 + t52974 + t53007 + t53008 - 0.1498*t53011 - 0.0489*t53027) - 7.435980000000001*(t52963 + t52964 - 0.1327*t31525*t52966 + t52974 + t53007 + t53008 + t53035 + t53042 - 0.0169*t53046 - 0.233*t53051) - 5.6603699999999995*(t52963 + t52964 - 0.1303*t31525*t52966 + t52974 + t53007 + t53008 + t53035 + t53042 + 0.0004*(-1.*t33555*t53046 - 1.*t33582*t53051) + t53057 + t53058 - 0.4541*t53061) - 7.67142*(t52963 + t52964 - 0.1318*t31525*t52966 + t52974 + t53007 + t53008 + t53035 + t53042 + t53057 + t53058 + t53087 + t53092 - 0.0122*t53098 - 0.816*t53103) - 1.4715*(t52963 + t52964 - 0.1306*t31525*t52966 + t52974 + t53007 + t53008 + t53035 + t53042 + t53057 + t53058 + t53087 + t53092 + t34718*t53098 + t34297*t53103 - 1.1182*(-1.*t34199*t53098 + t34115*t53103) + 0.0059*(t34115*t53098 + t34199*t53103));
  p_output1[16]=-54.151199999999996*(t53146 + t53159 - 0.0489*t32335*t53162 + 0.1498*t32441*t53162 + t53164 - 0.1708*t53168) - 11.4777*(t53146 + t53159 - 0.049*t53162 - 0.135*t53168) - 7.435980000000001*(t53146 + t53159 + t53164 - 0.1327*t53168 + t53180 + t53181 - 0.233*t53185 - 0.0169*t53189) - 5.6603699999999995*(t53146 + t53159 + t53164 - 0.1303*t53168 + t53180 + t53181 + 0.0004*(-1.*t33582*t53185 - 1.*t33555*t53189) + t53195 + t53196 - 0.4541*t53204) - 7.67142*(t53146 + t53159 + t53164 - 0.1318*t53168 + t53180 + t53181 + t53195 + t53196 + t53213 + t53214 - 0.816*t53217 - 0.0122*t53227) - 1.4715*(t53146 + t53159 + t53164 - 0.1306*t53168 + t53180 + t53181 + t53195 + t53196 + t53213 + t53214 + t34297*t53217 + t34718*t53227 + 0.0059*(t34199*t53217 + t34115*t53227) - 1.1182*(t34115*t53217 - 1.*t34199*t53227));
  p_output1[17]=-54.151199999999996*(t53255 + t53261 - 0.1498*t53265 - 0.0489*t53271) - 7.435980000000001*(t53255 + t53261 + t53277 + t53278 - 0.0169*t53283 - 0.233*t53288) - 5.6603699999999995*(t53255 + t53261 + t53277 + t53278 + 0.0004*(-1.*t33555*t53283 - 1.*t33582*t53288) + t53293 + t53294 - 0.4541*t53297) - 7.67142*(t53255 + t53261 + t53277 + t53278 + t53293 + t53294 + t53306 + t53312 - 0.0122*t53316 - 0.816*t53322) - 1.4715*(t53255 + t53261 + t53277 + t53278 + t53293 + t53294 + t53306 + t53312 + t34718*t53316 + t34297*t53322 - 1.1182*(-1.*t34199*t53316 + t34115*t53322) + 0.0059*(t34115*t53316 + t34199*t53322));
  p_output1[18]=-7.435980000000001*(t53355 + t53360 - 0.0169*t53365 - 0.233*t53368) - 5.6603699999999995*(t53355 + t53360 + t53374 + t53375 - 0.4541*t53378 + 0.0004*(-1.*t33582*t53368 + t53380)) - 7.67142*(t53355 + t53360 + t53374 + t53375 + t53388 + t53394 - 0.0122*t53397 - 0.816*t53402) - 1.4715*(t53355 + t53360 + t53374 + t53375 + t53388 + t53394 + t34718*t53397 + t34297*t53402 - 1.1182*(-1.*t34199*t53397 + t34115*t53402) + 0.0059*(t34115*t53397 + t34199*t53402));
  p_output1[19]=-5.6603699999999995*(t53424 + 0.0004*(t53380 + t33582*t53434) + t53435 - 0.4541*t53437) - 7.67142*(t53424 + t53435 + t53450 + t53455 - 0.0122*t53459 - 0.816*t53463) - 1.4715*(t53424 + t53435 + t53450 + t53455 + t34718*t53459 + t34297*t53463 - 1.1182*(-1.*t34199*t53459 + t34115*t53463) + 0.0059*(t34115*t53459 + t34199*t53463));
  p_output1[20]=-7.67142*(t53487 + t53490 - 0.0122*t53492 - 0.816*t53495) - 1.4715*(t53487 + t53490 + t34718*t53492 + t34297*t53495 - 1.1182*(t34115*t53495 + t53504) + 0.0059*(t34199*t53495 + t53510));
  p_output1[21]=-1.4715*((0.0216*t34115 + t34596)*t53492 + (-1.1135*t34115 - 0.0216*t34199)*t53533 - 1.1182*(t53504 - 1.*t34115*t53533) + 0.0059*(t53510 - 1.*t34199*t53533));
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 22, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "Ge_vec_cassie.hh"

namespace Times[2, step, Pattern[Cassie, Blank[]]]
{

void Ge_vec_cassie_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
