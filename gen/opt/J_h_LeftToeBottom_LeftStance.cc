/*
 * Automatically Generated from Mathematica.
 * Mon 12 Jun 2017 22:10:00 GMT-04:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;


#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t92;
  double t2899;
  double t3572;
  double t8678;
  double t12989;
  double t17508;
  double t20040;
  double t20292;
  double t20382;
  double t18488;
  double t18831;
  double t19157;
  double t20441;
  double t20813;
  double t20815;
  double t20857;
  double t20934;
  double t21138;
  double t21170;
  double t21176;
  double t20810;
  double t20593;
  double t20617;
  double t20656;
  double t20754;
  double t20786;
  double t20787;
  double t20788;
  double t21646;
  double t21647;
  double t21648;
  double t21650;
  double t21686;
  double t21697;
  double t21715;
  double t21773;
  double t21786;
  double t21796;
  double t21826;
  double t21827;
  double t21828;
  double t21853;
  double t22002;
  double t22176;
  double t22204;
  double t22329;
  double t22456;
  double t22462;
  double t22465;
  double t22724;
  double t22825;
  double t23117;
  double t23199;
  double t23295;
  double t23440;
  double t23442;
  double t23537;
  double t23545;
  double t23581;
  double t23598;
  double t23614;
  double t23618;
  double t23634;
  double t23653;
  double t23681;
  double t23682;
  double t23723;
  double t23729;
  double t23738;
  double t1060;
  double t2796;
  double t18342;
  double t18476;
  double t20748;
  double t20758;
  double t20775;
  double t20859;
  double t21024;
  double t21066;
  double t21181;
  double t21198;
  double t21296;
  double t23917;
  double t23920;
  double t23928;
  double t21622;
  double t21634;
  double t21643;
  double t21698;
  double t21725;
  double t21765;
  double t23858;
  double t23874;
  double t23899;
  double t24004;
  double t24008;
  double t24018;
  double t21814;
  double t21821;
  double t21825;
  double t21928;
  double t21960;
  double t21980;
  double t22080;
  double t22148;
  double t24020;
  double t24022;
  double t24025;
  double t24027;
  double t24028;
  double t24029;
  double t22437;
  double t22442;
  double t22449;
  double t22455;
  double t23126;
  double t23273;
  double t23279;
  double t24046;
  double t24050;
  double t24055;
  double t24060;
  double t24091;
  double t24100;
  double t23518;
  double t23519;
  double t23520;
  double t23623;
  double t23639;
  double t23651;
  double t24148;
  double t24196;
  double t24197;
  double t24204;
  double t24208;
  double t24210;
  double t23719;
  double t23720;
  double t23721;
  double t24214;
  double t24268;
  double t24272;
  double t24276;
  double t24279;
  double t24283;
  double t24636;
  double t24644;
  double t24645;
  double t24649;
  double t24652;
  double t24661;
  double t24663;
  double t24665;
  double t24672;
  double t24684;
  double t24689;
  double t24691;
  double t24705;
  double t24707;
  double t24709;
  double t24714;
  double t24715;
  double t24716;
  double t24718;
  double t24719;
  double t24724;
  double t24795;
  double t24808;
  double t24811;
  double t24832;
  double t24837;
  double t24840;
  double t24861;
  double t24906;
  double t24940;
  double t24969;
  double t24972;
  double t25005;
  double t25028;
  double t25040;
  double t25050;
  double t25275;
  double t25279;
  double t25280;
  double t25397;
  double t25398;
  double t25406;
  double t25410;
  double t25483;
  double t25518;
  double t25541;
  double t25566;
  double t25570;
  double t25582;
  double t25594;
  double t25602;
  double t25606;
  double t25613;
  double t25614;
  double t25616;
  double t25621;
  double t25622;
  double t25718;
  double t25742;
  double t25745;
  double t25752;
  double t25784;
  double t25796;
  double t25801;
  double t25805;
  double t25808;
  double t25810;
  double t25852;
  double t25853;
  double t25854;
  double t25872;
  double t25875;
  double t25876;
  double t25892;
  double t25893;
  double t25894;
  double t25911;
  double t25912;
  double t26024;
  double t26046;
  double t26057;
  double t26067;
  double t26092;
  double t26095;
  double t26097;
  double t26101;
  double t26102;
  double t26106;
  double t26122;
  double t26126;
  double t26127;
  double t25882;
  double t25889;
  double t25890;
  double t26183;
  double t26185;
  double t26186;
  double t26194;
  double t26195;
  double t26196;
  double t26198;
  double t26201;
  double t26273;
  double t26283;
  double t26285;
  double t26287;
  double t26301;
  double t26306;
  double t26308;
  double t26320;
  double t26325;
  double t26336;
  double t26356;
  double t26357;
  double t26363;
  double t26372;
  double t26379;
  double t26383;
  double t26429;
  double t26430;
  double t26434;
  double t26443;
  double t26444;
  double t26573;
  double t26584;
  double t26586;
  double t26587;
  double t26590;
  double t26594;
  double t26596;
  double t26597;
  double t26599;
  double t26603;
  double t26605;
  double t26609;
  double t26610;
  double t26612;
  double t26655;
  double t26656;
  double t26660;
  double t26664;
  double t26665;
  double t26667;
  double t26668;
  double t26786;
  double t26791;
  double t26792;
  double t26795;
  double t26799;
  double t26800;
  double t26839;
  double t26841;
  double t26842;
  double t26864;
  double t26865;
  double t26868;
  double t26871;
  double t26881;
  double t27073;
  double t27078;
  double t27079;
  double t26895;
  double t27103;
  double t27096;
  double t27102;
  double t27104;
  double t27105;
  double t27123;
  double t27124;
  double t27125;
  double t27110;
  double t27111;
  double t27114;
  double t27150;
  double t27151;
  double t27153;
  double t27143;
  double t27144;
  double t27147;
  double t27130;
  double t27131;
  double t27137;
  double t27177;
  double t27179;
  double t27180;
  double t27187;
  double t27188;
  double t27191;
  double t27199;
  double t27200;
  double t27203;
  double t27209;
  double t27217;
  double t27218;
  double t27221;
  double t27222;
  double t27226;
  double t27247;
  double t27248;
  double t27253;
  double t27258;
  double t27266;
  double t27270;
  double t27277;
  double t27281;
  double t27287;
  double t27289;
  double t27291;
  double t27295;
  double t27357;
  double t27363;
  double t27364;
  double t27348;
  double t27350;
  double t27353;
  double t27384;
  double t27385;
  double t27386;
  double t27366;
  double t27373;
  double t27376;
  double t27399;
  double t27401;
  double t27403;
  double t27411;
  double t27412;
  double t27413;
  double t27425;
  double t27433;
  double t27434;
  double t27444;
  double t27455;
  double t27458;
  double t27461;
  double t27462;
  double t27470;
  double t27475;
  double t27478;
  double t27492;
  double t27498;
  double t27500;
  double t27501;
  double t27509;
  double t27511;
  double t27512;
  double t27516;
  double t27518;
  double t27526;
  double t27558;
  double t27562;
  double t27564;
  double t27600;
  double t27601;
  double t27603;
  double t27593;
  double t27594;
  double t27595;
  double t27586;
  double t27587;
  double t27589;
  double t27610;
  double t27613;
  double t27614;
  double t27616;
  double t27618;
  double t27623;
  double t27625;
  double t27628;
  double t27629;
  double t27631;
  double t27634;
  double t27637;
  double t27642;
  double t27643;
  double t27650;
  double t27656;
  double t27657;
  double t27659;
  double t27665;
  double t27666;
  double t27672;
  double t27676;
  double t27677;
  double t27681;
  double t27684;
  double t27686;
  double t27687;
  double t27725;
  double t27729;
  double t27730;
  double t27734;
  double t27740;
  double t27742;
  double t27746;
  double t27749;
  double t27750;
  double t27756;
  double t27757;
  double t27761;
  double t27769;
  double t27770;
  double t27775;
  double t27778;
  double t27782;
  double t27783;
  double t27787;
  double t27795;
  double t27796;
  double t27807;
  double t27808;
  double t27810;
  double t27813;
  double t27818;
  double t27819;
  double t27823;
  double t27826;
  double t27827;
  double t27829;
  double t27830;
  double t27833;
  double t27841;
  double t27842;
  double t27843;
  double t27879;
  double t27882;
  double t27885;
  double t27897;
  double t27900;
  double t27903;
  double t27904;
  double t27915;
  double t27924;
  double t27925;
  double t27930;
  double t27933;
  double t27937;
  double t27942;
  double t27943;
  double t27946;
  double t27955;
  double t27961;
  double t27962;
  double t27965;
  double t27973;
  double t27974;
  double t27979;
  double t27981;
  double t27986;
  double t27989;
  double t27991;
  double t27992;
  double t28008;
  double t28011;
  double t28012;
  double t25848;
  double t25849;
  double t25855;
  double t25857;
  double t25859;
  double t28066;
  double t28068;
  double t28072;
  double t28047;
  double t28048;
  double t28053;
  double t28084;
  double t28092;
  double t28094;
  double t28115;
  double t28116;
  double t28119;
  double t28121;
  double t28125;
  double t28126;
  double t28129;
  double t28130;
  double t28132;
  double t28137;
  double t28146;
  double t28155;
  double t28164;
  double t28166;
  double t28168;
  double t28174;
  double t28175;
  double t28180;
  double t26167;
  double t26169;
  double t26175;
  double t26176;
  double t26177;
  double t28109;
  double t28111;
  double t28113;
  double t28239;
  double t28247;
  double t28251;
  double t28256;
  double t28261;
  double t28265;
  double t28269;
  double t28273;
  double t28279;
  double t28284;
  double t28285;
  double t28288;
  double t28293;
  double t28295;
  double t28297;
  double t28301;
  double t28304;
  double t28305;
  double t28309;
  double t28311;
  double t28314;
  double t28318;
  double t28321;
  double t28323;
  double t26421;
  double t26422;
  double t26424;
  double t26438;
  double t26441;
  double t28351;
  double t28353;
  double t28354;
  double t28358;
  double t28360;
  double t28369;
  double t28371;
  double t28375;
  double t28393;
  double t28394;
  double t28400;
  double t28402;
  double t28407;
  double t28426;
  double t28431;
  double t28433;
  double t28437;
  double t28440;
  double t28443;
  double t26638;
  double t26639;
  double t26641;
  double t26647;
  double t26653;
  double t28480;
  double t28481;
  double t28487;
  double t28493;
  double t28494;
  double t28503;
  double t28504;
  double t28509;
  double t28521;
  double t28522;
  double t28525;
  double t28526;
  double t28529;
  double t26826;
  double t26834;
  double t26836;
  double t26848;
  double t26850;
  double t28563;
  double t28567;
  double t28572;
  double t28582;
  double t28591;
  double t28596;
  double t28598;
  double t26905;
  double t26906;
  double t27060;
  double t27062;
  double t27070;
  double t28602;
  double t28667;
  double t28668;
  double t28675;
  double t28612;
  double t28732;
  double t28733;
  double t28861;
  double t28864;
  double t28867;
  double t28839;
  double t28841;
  double t28853;
  double t28893;
  double t28894;
  double t28895;
  double t28877;
  double t28879;
  double t28880;
  double t28911;
  double t28913;
  double t28915;
  double t28917;
  double t28942;
  double t28943;
  double t28948;
  double t28949;
  double t28950;
  double t28959;
  double t28960;
  double t28966;
  double t28990;
  double t28991;
  double t29015;
  double t29029;
  double t29037;
  double t29042;
  double t29047;
  double t29052;
  double t29063;
  double t29065;
  double t29076;
  double t29077;
  double t29085;
  double t29086;
  double t29088;
  double t29212;
  double t29217;
  double t29219;
  double t29191;
  double t29200;
  double t29207;
  double t29176;
  double t29177;
  double t29186;
  double t29285;
  double t29286;
  double t29290;
  double t29322;
  double t29325;
  double t29329;
  double t29332;
  double t29335;
  double t29338;
  double t29342;
  double t29343;
  double t29344;
  double t29348;
  double t29349;
  double t29351;
  double t29359;
  double t29363;
  double t29368;
  double t29377;
  double t29383;
  double t29384;
  double t29386;
  double t29388;
  double t29391;
  double t29405;
  double t29414;
  double t29417;
  double t29466;
  double t29468;
  double t29469;
  double t29476;
  double t29478;
  double t29484;
  double t29487;
  double t29491;
  double t29540;
  double t29543;
  double t29545;
  double t29557;
  double t29560;
  double t29567;
  double t29572;
  double t29576;
  double t29578;
  double t29588;
  double t29592;
  double t29594;
  double t29600;
  double t29605;
  double t29607;
  double t29609;
  double t29610;
  double t29616;
  double t29619;
  double t29622;
  double t29628;
  double t29639;
  double t29644;
  double t29651;
  double t29665;
  double t29668;
  double t29674;
  double t29804;
  double t29843;
  double t29847;
  double t29868;
  double t29889;
  double t29901;
  double t29904;
  double t29946;
  double t29953;
  double t29966;
  double t29996;
  double t29997;
  double t30003;
  double t30012;
  double t30013;
  double t30014;
  double t30030;
  double t30031;
  double t30036;
  double t30042;
  double t30044;
  double t30062;
  double t30070;
  double t30073;
  double t30075;
  double t30080;
  double t30084;
  double t30091;
  double t30096;
  double t30103;
  double t30105;
  double t30146;
  double t30147;
  double t30148;
  double t30126;
  double t30129;
  double t30133;
  double t30151;
  double t30153;
  double t30154;
  double t30187;
  double t30194;
  double t30195;
  double t30203;
  double t30207;
  double t30210;
  double t30213;
  double t30215;
  double t30216;
  double t30226;
  double t30227;
  double t30232;
  double t30242;
  double t30250;
  double t30260;
  double t30281;
  double t30282;
  double t30287;
  double t30177;
  double t30179;
  double t30182;
  double t30375;
  double t30376;
  double t30380;
  double t30382;
  double t30383;
  double t30393;
  double t30419;
  double t30425;
  double t30434;
  double t30437;
  double t30439;
  double t30440;
  double t30442;
  double t30443;
  double t30445;
  double t30451;
  double t30452;
  double t30453;
  double t30456;
  double t30457;
  double t30461;
  double t30474;
  double t30476;
  double t30478;
  double t30519;
  double t30520;
  double t30533;
  double t30554;
  double t30563;
  double t30568;
  double t30575;
  double t30592;
  double t30601;
  double t30602;
  double t30619;
  double t30625;
  double t30626;
  double t30629;
  double t30641;
  double t30644;
  double t30653;
  double t30654;
  double t30656;
  double t30701;
  double t30708;
  double t30747;
  double t30771;
  double t30775;
  double t30808;
  double t30834;
  double t30838;
  double t30839;
  double t30841;
  double t30845;
  double t30846;
  double t30852;
  double t30879;
  double t30883;
  double t30887;
  double t30891;
  double t30897;
  double t30900;
  double t30903;
  double t30910;
  double t30928;
  double t30929;
  double t30933;
  double t30918;
  double t30942;
  double t30944;
  double t28818;
  double t28824;
  double t28825;
  double t30954;
  double t30967;
  double t30968;
  double t30993;
  double t31007;
  double t31011;
  double t31014;
  double t31024;
  double t31026;
  double t31027;
  double t31028;
  double t31030;
  double t31032;
  double t29093;
  double t29105;
  double t29112;
  double t29122;
  double t29124;
  double t29127;
  double t30973;
  double t30977;
  double t30979;
  double t29428;
  double t29429;
  double t29433;
  double t29442;
  double t29444;
  double t29446;
  double t29684;
  double t29696;
  double t29699;
  double t29709;
  double t29722;
  double t29745;
  double t30112;
  double t30115;
  double t30116;
  double t30120;
  double t30122;
  double t30123;
  double t30309;
  double t30316;
  double t30324;
  double t30328;
  double t30332;
  double t30347;
  double t30481;
  double t30482;
  double t30483;
  double t30485;
  double t30487;
  double t30498;
  double t30665;
  double t30667;
  double t30671;
  double t30676;
  double t30680;
  double t30686;
  double t30856;
  double t30857;
  double t30863;
  double t30871;
  double t30873;
  double t30875;
  double t30914;
  double t30915;
  double t30919;
  double t30922;
  double t30935;
  double t30938;
  double t31294;
  double t31295;
  double t31296;
  double t31298;
  double t28760;
  double t28766;
  double t28767;
  t92 = Cos(var1[6]);
  t2899 = Sin(var1[4]);
  t3572 = Sin(var1[5]);
  t8678 = Cos(var1[4]);
  t12989 = Sin(var1[6]);
  t17508 = Cos(var1[7]);
  t20040 = t8678*t92;
  t20292 = -1.*t2899*t3572*t12989;
  t20382 = t20040 + t20292;
  t18488 = t92*t2899*t3572;
  t18831 = t8678*t12989;
  t19157 = t18488 + t18831;
  t20441 = Sin(var1[7]);
  t20813 = Cos(var1[8]);
  t20815 = -1.*t20813;
  t20857 = 1. + t20815;
  t20934 = Sin(var1[8]);
  t21138 = t17508*t19157;
  t21170 = t20382*t20441;
  t21176 = t21138 + t21170;
  t20810 = Cos(var1[5]);
  t20593 = Cos(var1[9]);
  t20617 = -1.*t20593;
  t20656 = 1. + t20617;
  t20754 = Sin(var1[9]);
  t20786 = t17508*t20382;
  t20787 = -1.*t19157*t20441;
  t20788 = t20786 + t20787;
  t21646 = -1.*t20810*t20813*t2899;
  t21647 = -1.*t21176*t20934;
  t21648 = t21646 + t21647;
  t21650 = Cos(var1[10]);
  t21686 = -1.*t21650;
  t21697 = 1. + t21686;
  t21715 = Sin(var1[10]);
  t21773 = t20754*t20788;
  t21786 = t20593*t21648;
  t21796 = t21773 + t21786;
  t21826 = t20593*t20788;
  t21827 = -1.*t20754*t21648;
  t21828 = t21826 + t21827;
  t21853 = Cos(var1[11]);
  t22002 = Sin(var1[11]);
  t22176 = -1.*t21715*t21796;
  t22204 = t21650*t21828;
  t22329 = t22176 + t22204;
  t22456 = t21650*t21796;
  t22462 = t21715*t21828;
  t22465 = t22456 + t22462;
  t22724 = Cos(var1[12]);
  t22825 = -1.*t22724;
  t23117 = 1. + t22825;
  t23199 = Sin(var1[12]);
  t23295 = t22002*t22329;
  t23440 = t21853*t22465;
  t23442 = t23295 + t23440;
  t23537 = t21853*t22329;
  t23545 = -1.*t22002*t22465;
  t23581 = t23537 + t23545;
  t23598 = Cos(var1[13]);
  t23614 = -1.*t23598;
  t23618 = 1. + t23614;
  t23634 = Sin(var1[13]);
  t23653 = -1.*t23199*t23442;
  t23681 = t22724*t23581;
  t23682 = t23653 + t23681;
  t23723 = t22724*t23442;
  t23729 = t23199*t23581;
  t23738 = t23723 + t23729;
  t1060 = -1.*t92;
  t2796 = 1. + t1060;
  t18342 = -1.*t17508;
  t18476 = 1. + t18342;
  t20748 = -0.09*t20656;
  t20758 = 0.049*t20754;
  t20775 = t20748 + t20758;
  t20859 = -0.049*t20857;
  t21024 = -0.135*t20934;
  t21066 = t20859 + t21024;
  t21181 = 0.135*t20857;
  t21198 = -0.049*t20934;
  t21296 = t21181 + t21198;
  t23917 = -1.*t8678*t20810*t92*t17508;
  t23920 = t8678*t20810*t12989*t20441;
  t23928 = t23917 + t23920;
  t21622 = -0.049*t20656;
  t21634 = -0.09*t20754;
  t21643 = t21622 + t21634;
  t21698 = -0.049*t21697;
  t21725 = -0.21*t21715;
  t21765 = t21698 + t21725;
  t23858 = t8678*t20810*t17508*t12989;
  t23874 = t8678*t20810*t92*t20441;
  t23899 = t23858 + t23874;
  t24004 = -1.*t8678*t20813*t3572;
  t24008 = -1.*t23928*t20934;
  t24018 = t24004 + t24008;
  t21814 = -0.21*t21697;
  t21821 = 0.049*t21715;
  t21825 = t21814 + t21821;
  t21928 = -1.*t21853;
  t21960 = 1. + t21928;
  t21980 = -0.2707*t21960;
  t22080 = 0.0016*t22002;
  t22148 = t21980 + t22080;
  t24020 = t20754*t23899;
  t24022 = t20593*t24018;
  t24025 = t24020 + t24022;
  t24027 = t20593*t23899;
  t24028 = -1.*t20754*t24018;
  t24029 = t24027 + t24028;
  t22437 = -1. + t21853;
  t22442 = 0.0016*t22437;
  t22449 = -0.2707*t22002;
  t22455 = t22442 + t22449;
  t23126 = 0.0184*t23117;
  t23273 = -0.7055*t23199;
  t23279 = t23126 + t23273;
  t24046 = -1.*t21715*t24025;
  t24050 = t21650*t24029;
  t24055 = t24046 + t24050;
  t24060 = t21650*t24025;
  t24091 = t21715*t24029;
  t24100 = t24060 + t24091;
  t23518 = -0.7055*t23117;
  t23519 = -0.0184*t23199;
  t23520 = t23518 + t23519;
  t23623 = -1.1135*t23618;
  t23639 = 0.0216*t23634;
  t23651 = t23623 + t23639;
  t24148 = t22002*t24055;
  t24196 = t21853*t24100;
  t24197 = t24148 + t24196;
  t24204 = t21853*t24055;
  t24208 = -1.*t22002*t24100;
  t24210 = t24204 + t24208;
  t23719 = -0.0216*t23618;
  t23720 = -1.1135*t23634;
  t23721 = t23719 + t23720;
  t24214 = -1.*t23199*t24197;
  t24268 = t22724*t24210;
  t24272 = t24214 + t24268;
  t24276 = t22724*t24197;
  t24279 = t23199*t24210;
  t24283 = t24276 + t24279;
  t24636 = t92*t2899;
  t24644 = t8678*t3572*t12989;
  t24645 = t24636 + t24644;
  t24649 = t8678*t92*t3572;
  t24652 = -1.*t2899*t12989;
  t24661 = t24649 + t24652;
  t24663 = t17508*t24645;
  t24665 = t24661*t20441;
  t24672 = t24663 + t24665;
  t24684 = t17508*t24661;
  t24689 = -1.*t24645*t20441;
  t24691 = t24684 + t24689;
  t24705 = t20754*t24691;
  t24707 = -1.*t20593*t24672*t20934;
  t24709 = t24705 + t24707;
  t24714 = t20593*t24691;
  t24715 = t20754*t24672*t20934;
  t24716 = t24714 + t24715;
  t24718 = -1.*t21715*t24709;
  t24719 = t21650*t24716;
  t24724 = t24718 + t24719;
  t24795 = t21650*t24709;
  t24808 = t21715*t24716;
  t24811 = t24795 + t24808;
  t24832 = t22002*t24724;
  t24837 = t21853*t24811;
  t24840 = t24832 + t24837;
  t24861 = t21853*t24724;
  t24906 = -1.*t22002*t24811;
  t24940 = t24861 + t24906;
  t24969 = -1.*t23199*t24840;
  t24972 = t22724*t24940;
  t25005 = t24969 + t24972;
  t25028 = t22724*t24840;
  t25040 = t23199*t24940;
  t25050 = t25028 + t25040;
  t25275 = -1.*t8678*t92*t3572;
  t25279 = t2899*t12989;
  t25280 = t25275 + t25279;
  t25397 = -1.*t25280*t20441;
  t25398 = t24663 + t25397;
  t25406 = -1.*t17508*t25280;
  t25410 = t25406 + t24689;
  t25483 = t20754*t25410;
  t25518 = -1.*t20593*t25398*t20934;
  t25541 = t25483 + t25518;
  t25566 = t20593*t25410;
  t25570 = t20754*t25398*t20934;
  t25582 = t25566 + t25570;
  t25594 = -1.*t21715*t25541;
  t25602 = t21650*t25582;
  t25606 = t25594 + t25602;
  t25613 = t21650*t25541;
  t25614 = t21715*t25582;
  t25616 = t25613 + t25614;
  t25621 = t22002*t25606;
  t25622 = t21853*t25616;
  t25718 = t25621 + t25622;
  t25742 = t21853*t25606;
  t25745 = -1.*t22002*t25616;
  t25752 = t25742 + t25745;
  t25784 = -1.*t23199*t25718;
  t25796 = t22724*t25752;
  t25801 = t25784 + t25796;
  t25805 = t22724*t25718;
  t25808 = t23199*t25752;
  t25810 = t25805 + t25808;
  t25852 = t17508*t25280;
  t25853 = t24645*t20441;
  t25854 = t25852 + t25853;
  t25872 = -1.*t20813*t25854;
  t25875 = -1.*t8678*t20810*t20934;
  t25876 = t25872 + t25875;
  t25892 = -1.*t21650*t20754*t25876;
  t25893 = -1.*t20593*t21715*t25876;
  t25894 = t25892 + t25893;
  t25911 = t20593*t21650*t25876;
  t25912 = -1.*t20754*t21715*t25876;
  t26024 = t25911 + t25912;
  t26046 = t22002*t25894;
  t26057 = t21853*t26024;
  t26067 = t26046 + t26057;
  t26092 = t21853*t25894;
  t26095 = -1.*t22002*t26024;
  t26097 = t26092 + t26095;
  t26101 = -1.*t23199*t26067;
  t26102 = t22724*t26097;
  t26106 = t26101 + t26102;
  t26122 = t22724*t26067;
  t26126 = t23199*t26097;
  t26127 = t26122 + t26126;
  t25882 = t8678*t20810*t20813;
  t25889 = -1.*t25854*t20934;
  t25890 = t25882 + t25889;
  t26183 = -1.*t20754*t25398;
  t26185 = -1.*t20593*t25890;
  t26186 = t26183 + t26185;
  t26194 = t20593*t25398;
  t26195 = -1.*t20754*t25890;
  t26196 = t26194 + t26195;
  t26198 = t21715*t26186;
  t26201 = t21650*t26196;
  t26273 = t26198 + t26201;
  t26283 = t21650*t26186;
  t26285 = -1.*t21715*t26196;
  t26287 = t26283 + t26285;
  t26301 = -1.*t22002*t26273;
  t26306 = t21853*t26287;
  t26308 = t26301 + t26306;
  t26320 = t21853*t26273;
  t26325 = t22002*t26287;
  t26336 = t26320 + t26325;
  t26356 = t23199*t26308;
  t26357 = t22724*t26336;
  t26363 = t26356 + t26357;
  t26372 = t22724*t26308;
  t26379 = -1.*t23199*t26336;
  t26383 = t26372 + t26379;
  t26429 = t20754*t25398;
  t26430 = t20593*t25890;
  t26434 = t26429 + t26430;
  t26443 = -1.*t21715*t26434;
  t26444 = t26443 + t26201;
  t26573 = -1.*t21650*t26434;
  t26584 = t26573 + t26285;
  t26586 = -1.*t22002*t26444;
  t26587 = t21853*t26584;
  t26590 = t26586 + t26587;
  t26594 = t21853*t26444;
  t26596 = t22002*t26584;
  t26597 = t26594 + t26596;
  t26599 = t23199*t26590;
  t26603 = t22724*t26597;
  t26605 = t26599 + t26603;
  t26609 = t22724*t26590;
  t26610 = -1.*t23199*t26597;
  t26612 = t26609 + t26610;
  t26655 = t21650*t26434;
  t26656 = t21715*t26196;
  t26660 = t26655 + t26656;
  t26664 = -1.*t21853*t26660;
  t26665 = t26586 + t26664;
  t26667 = -1.*t22002*t26660;
  t26668 = t26594 + t26667;
  t26786 = t23199*t26665;
  t26791 = t22724*t26668;
  t26792 = t26786 + t26791;
  t26795 = t22724*t26665;
  t26799 = -1.*t23199*t26668;
  t26800 = t26795 + t26799;
  t26839 = t22002*t26444;
  t26841 = t21853*t26660;
  t26842 = t26839 + t26841;
  t26864 = -1.*t23199*t26842;
  t26865 = t26864 + t26791;
  t26868 = -1.*t22724*t26842;
  t26871 = t26868 + t26799;
  t26881 = -1.*t23634*t26865;
  t27073 = t22724*t26842;
  t27078 = t23199*t26668;
  t27079 = t27073 + t27078;
  t26895 = t23598*t26865;
  t27103 = Cos(var1[3]);
  t27096 = Sin(var1[3]);
  t27102 = -1.*t20810*t27096;
  t27104 = -1.*t27103*t2899*t3572;
  t27105 = t27102 + t27104;
  t27123 = -1.*t27103*t8678*t92;
  t27124 = -1.*t27105*t12989;
  t27125 = t27123 + t27124;
  t27110 = t92*t27105;
  t27111 = -1.*t27103*t8678*t12989;
  t27114 = t27110 + t27111;
  t27150 = t17508*t27114;
  t27151 = t27125*t20441;
  t27153 = t27150 + t27151;
  t27143 = t27103*t20810*t2899;
  t27144 = -1.*t27096*t3572;
  t27147 = t27143 + t27144;
  t27130 = t17508*t27125;
  t27131 = -1.*t27114*t20441;
  t27137 = t27130 + t27131;
  t27177 = t20813*t27147;
  t27179 = -1.*t27153*t20934;
  t27180 = t27177 + t27179;
  t27187 = t20754*t27137;
  t27188 = t20593*t27180;
  t27191 = t27187 + t27188;
  t27199 = t20593*t27137;
  t27200 = -1.*t20754*t27180;
  t27203 = t27199 + t27200;
  t27209 = -1.*t21715*t27191;
  t27217 = t21650*t27203;
  t27218 = t27209 + t27217;
  t27221 = t21650*t27191;
  t27222 = t21715*t27203;
  t27226 = t27221 + t27222;
  t27247 = t22002*t27218;
  t27248 = t21853*t27226;
  t27253 = t27247 + t27248;
  t27258 = t21853*t27218;
  t27266 = -1.*t22002*t27226;
  t27270 = t27258 + t27266;
  t27277 = -1.*t23199*t27253;
  t27281 = t22724*t27270;
  t27287 = t27277 + t27281;
  t27289 = t22724*t27253;
  t27291 = t23199*t27270;
  t27295 = t27289 + t27291;
  t27357 = t92*t27096*t2899;
  t27363 = t8678*t27096*t3572*t12989;
  t27364 = t27357 + t27363;
  t27348 = -1.*t8678*t92*t27096*t3572;
  t27350 = t27096*t2899*t12989;
  t27353 = t27348 + t27350;
  t27384 = t17508*t27353;
  t27385 = t27364*t20441;
  t27386 = t27384 + t27385;
  t27366 = t17508*t27364;
  t27373 = -1.*t27353*t20441;
  t27376 = t27366 + t27373;
  t27399 = t8678*t20810*t20813*t27096;
  t27401 = -1.*t27386*t20934;
  t27403 = t27399 + t27401;
  t27411 = t20754*t27376;
  t27412 = t20593*t27403;
  t27413 = t27411 + t27412;
  t27425 = t20593*t27376;
  t27433 = -1.*t20754*t27403;
  t27434 = t27425 + t27433;
  t27444 = -1.*t21715*t27413;
  t27455 = t21650*t27434;
  t27458 = t27444 + t27455;
  t27461 = t21650*t27413;
  t27462 = t21715*t27434;
  t27470 = t27461 + t27462;
  t27475 = t22002*t27458;
  t27478 = t21853*t27470;
  t27492 = t27475 + t27478;
  t27498 = t21853*t27458;
  t27500 = -1.*t22002*t27470;
  t27501 = t27498 + t27500;
  t27509 = -1.*t23199*t27492;
  t27511 = t22724*t27501;
  t27512 = t27509 + t27511;
  t27516 = t22724*t27492;
  t27518 = t23199*t27501;
  t27526 = t27516 + t27518;
  t27558 = -1.*t20810*t27096*t2899;
  t27562 = -1.*t27103*t3572;
  t27564 = t27558 + t27562;
  t27600 = t92*t17508*t27564;
  t27601 = -1.*t27564*t12989*t20441;
  t27603 = t27600 + t27601;
  t27593 = t27103*t20810;
  t27594 = -1.*t27096*t2899*t3572;
  t27595 = t27593 + t27594;
  t27586 = -1.*t17508*t27564*t12989;
  t27587 = -1.*t92*t27564*t20441;
  t27589 = t27586 + t27587;
  t27610 = t20813*t27595;
  t27613 = -1.*t27603*t20934;
  t27614 = t27610 + t27613;
  t27616 = t20754*t27589;
  t27618 = t20593*t27614;
  t27623 = t27616 + t27618;
  t27625 = t20593*t27589;
  t27628 = -1.*t20754*t27614;
  t27629 = t27625 + t27628;
  t27631 = -1.*t21715*t27623;
  t27634 = t21650*t27629;
  t27637 = t27631 + t27634;
  t27642 = t21650*t27623;
  t27643 = t21715*t27629;
  t27650 = t27642 + t27643;
  t27656 = t22002*t27637;
  t27657 = t21853*t27650;
  t27659 = t27656 + t27657;
  t27665 = t21853*t27637;
  t27666 = -1.*t22002*t27650;
  t27672 = t27665 + t27666;
  t27676 = -1.*t23199*t27659;
  t27677 = t22724*t27672;
  t27681 = t27676 + t27677;
  t27684 = t22724*t27659;
  t27686 = t23199*t27672;
  t27687 = t27684 + t27686;
  t27725 = -1.*t8678*t92*t27096;
  t27729 = -1.*t27595*t12989;
  t27730 = t27725 + t27729;
  t27734 = -1.*t92*t27595;
  t27740 = t8678*t27096*t12989;
  t27742 = t27734 + t27740;
  t27746 = t17508*t27730;
  t27749 = t27742*t20441;
  t27750 = t27746 + t27749;
  t27756 = t17508*t27742;
  t27757 = -1.*t27730*t20441;
  t27761 = t27756 + t27757;
  t27769 = t20754*t27761;
  t27770 = -1.*t20593*t27750*t20934;
  t27775 = t27769 + t27770;
  t27778 = t20593*t27761;
  t27782 = t20754*t27750*t20934;
  t27783 = t27778 + t27782;
  t27787 = -1.*t21715*t27775;
  t27795 = t21650*t27783;
  t27796 = t27787 + t27795;
  t27807 = t21650*t27775;
  t27808 = t21715*t27783;
  t27810 = t27807 + t27808;
  t27813 = t22002*t27796;
  t27818 = t21853*t27810;
  t27819 = t27813 + t27818;
  t27823 = t21853*t27796;
  t27826 = -1.*t22002*t27810;
  t27827 = t27823 + t27826;
  t27829 = -1.*t23199*t27819;
  t27830 = t22724*t27827;
  t27833 = t27829 + t27830;
  t27841 = t22724*t27819;
  t27842 = t23199*t27827;
  t27843 = t27841 + t27842;
  t27879 = t92*t27595;
  t27882 = -1.*t8678*t27096*t12989;
  t27885 = t27879 + t27882;
  t27897 = -1.*t27885*t20441;
  t27900 = t27746 + t27897;
  t27903 = -1.*t17508*t27885;
  t27904 = t27903 + t27757;
  t27915 = t20754*t27904;
  t27924 = -1.*t20593*t27900*t20934;
  t27925 = t27915 + t27924;
  t27930 = t20593*t27904;
  t27933 = t20754*t27900*t20934;
  t27937 = t27930 + t27933;
  t27942 = -1.*t21715*t27925;
  t27943 = t21650*t27937;
  t27946 = t27942 + t27943;
  t27955 = t21650*t27925;
  t27961 = t21715*t27937;
  t27962 = t27955 + t27961;
  t27965 = t22002*t27946;
  t27973 = t21853*t27962;
  t27974 = t27965 + t27973;
  t27979 = t21853*t27946;
  t27981 = -1.*t22002*t27962;
  t27986 = t27979 + t27981;
  t27989 = -1.*t23199*t27974;
  t27991 = t22724*t27986;
  t27992 = t27989 + t27991;
  t28008 = t22724*t27974;
  t28011 = t23199*t27986;
  t28012 = t28008 + t28011;
  t25848 = -0.135*t20813;
  t25849 = t25848 + t21198;
  t25855 = -0.049*t20813;
  t25857 = 0.135*t20934;
  t25859 = t25855 + t25857;
  t28066 = t17508*t27885;
  t28068 = t27730*t20441;
  t28072 = t28066 + t28068;
  t28047 = t20810*t27096*t2899;
  t28048 = t27103*t3572;
  t28053 = t28047 + t28048;
  t28084 = -1.*t20813*t28072;
  t28092 = -1.*t28053*t20934;
  t28094 = t28084 + t28092;
  t28115 = -1.*t21650*t20754*t28094;
  t28116 = -1.*t20593*t21715*t28094;
  t28119 = t28115 + t28116;
  t28121 = t20593*t21650*t28094;
  t28125 = -1.*t20754*t21715*t28094;
  t28126 = t28121 + t28125;
  t28129 = t22002*t28119;
  t28130 = t21853*t28126;
  t28132 = t28129 + t28130;
  t28137 = t21853*t28119;
  t28146 = -1.*t22002*t28126;
  t28155 = t28137 + t28146;
  t28164 = -1.*t23199*t28132;
  t28166 = t22724*t28155;
  t28168 = t28164 + t28166;
  t28174 = t22724*t28132;
  t28175 = t23199*t28155;
  t28180 = t28174 + t28175;
  t26167 = 0.049*t20593;
  t26169 = t26167 + t21634;
  t26175 = -0.09*t20593;
  t26176 = -0.049*t20754;
  t26177 = t26175 + t26176;
  t28109 = t20813*t28053;
  t28111 = -1.*t28072*t20934;
  t28113 = t28109 + t28111;
  t28239 = -1.*t20754*t27900;
  t28247 = -1.*t20593*t28113;
  t28251 = t28239 + t28247;
  t28256 = t20593*t27900;
  t28261 = -1.*t20754*t28113;
  t28265 = t28256 + t28261;
  t28269 = t21715*t28251;
  t28273 = t21650*t28265;
  t28279 = t28269 + t28273;
  t28284 = t21650*t28251;
  t28285 = -1.*t21715*t28265;
  t28288 = t28284 + t28285;
  t28293 = -1.*t22002*t28279;
  t28295 = t21853*t28288;
  t28297 = t28293 + t28295;
  t28301 = t21853*t28279;
  t28304 = t22002*t28288;
  t28305 = t28301 + t28304;
  t28309 = t23199*t28297;
  t28311 = t22724*t28305;
  t28314 = t28309 + t28311;
  t28318 = t22724*t28297;
  t28321 = -1.*t23199*t28305;
  t28323 = t28318 + t28321;
  t26421 = -0.21*t21650;
  t26422 = -0.049*t21715;
  t26424 = t26421 + t26422;
  t26438 = 0.049*t21650;
  t26441 = t26438 + t21725;
  t28351 = t20754*t27900;
  t28353 = t20593*t28113;
  t28354 = t28351 + t28353;
  t28358 = -1.*t21715*t28354;
  t28360 = t28358 + t28273;
  t28369 = -1.*t21650*t28354;
  t28371 = t28369 + t28285;
  t28375 = -1.*t22002*t28360;
  t28393 = t21853*t28371;
  t28394 = t28375 + t28393;
  t28400 = t21853*t28360;
  t28402 = t22002*t28371;
  t28407 = t28400 + t28402;
  t28426 = t23199*t28394;
  t28431 = t22724*t28407;
  t28433 = t28426 + t28431;
  t28437 = t22724*t28394;
  t28440 = -1.*t23199*t28407;
  t28443 = t28437 + t28440;
  t26638 = 0.0016*t21853;
  t26639 = t26638 + t22449;
  t26641 = -0.2707*t21853;
  t26647 = -0.0016*t22002;
  t26653 = t26641 + t26647;
  t28480 = t21650*t28354;
  t28481 = t21715*t28265;
  t28487 = t28480 + t28481;
  t28493 = -1.*t21853*t28487;
  t28494 = t28375 + t28493;
  t28503 = -1.*t22002*t28487;
  t28504 = t28400 + t28503;
  t28509 = t23199*t28494;
  t28521 = t22724*t28504;
  t28522 = t28509 + t28521;
  t28525 = t22724*t28494;
  t28526 = -1.*t23199*t28504;
  t28529 = t28525 + t28526;
  t26826 = -0.7055*t22724;
  t26834 = 0.0184*t23199;
  t26836 = t26826 + t26834;
  t26848 = -0.0184*t22724;
  t26850 = t26848 + t23273;
  t28563 = t22002*t28360;
  t28567 = t21853*t28487;
  t28572 = t28563 + t28567;
  t28582 = -1.*t23199*t28572;
  t28591 = t28582 + t28521;
  t28596 = -1.*t22724*t28572;
  t28598 = t28596 + t28526;
  t26905 = 0.0216*t23598;
  t26906 = t26905 + t23720;
  t27060 = -1.1135*t23598;
  t27062 = -0.0216*t23634;
  t27070 = t27060 + t27062;
  t28602 = -1.*t23634*t28591;
  t28667 = t22724*t28572;
  t28668 = t23199*t28504;
  t28675 = t28667 + t28668;
  t28612 = t23598*t28591;
  t28732 = -1.*t23634*t28675;
  t28733 = t28612 + t28732;
  t28861 = -1.*t27103*t92*t2899;
  t28864 = -1.*t27103*t8678*t3572*t12989;
  t28867 = t28861 + t28864;
  t28839 = t27103*t8678*t92*t3572;
  t28841 = -1.*t27103*t2899*t12989;
  t28853 = t28839 + t28841;
  t28893 = t17508*t28853;
  t28894 = t28867*t20441;
  t28895 = t28893 + t28894;
  t28877 = t17508*t28867;
  t28879 = -1.*t28853*t20441;
  t28880 = t28877 + t28879;
  t28911 = -1.*t27103*t8678*t20810*t20813;
  t28913 = -1.*t28895*t20934;
  t28915 = t28911 + t28913;
  t28917 = t20754*t28880;
  t28942 = t20593*t28915;
  t28943 = t28917 + t28942;
  t28948 = t20593*t28880;
  t28949 = -1.*t20754*t28915;
  t28950 = t28948 + t28949;
  t28959 = -1.*t21715*t28943;
  t28960 = t21650*t28950;
  t28966 = t28959 + t28960;
  t28990 = t21650*t28943;
  t28991 = t21715*t28950;
  t29015 = t28990 + t28991;
  t29029 = t22002*t28966;
  t29037 = t21853*t29015;
  t29042 = t29029 + t29037;
  t29047 = t21853*t28966;
  t29052 = -1.*t22002*t29015;
  t29063 = t29047 + t29052;
  t29065 = -1.*t23199*t29042;
  t29076 = t22724*t29063;
  t29077 = t29065 + t29076;
  t29085 = t22724*t29042;
  t29086 = t23199*t29063;
  t29088 = t29085 + t29086;
  t29212 = t92*t17508*t27147;
  t29217 = -1.*t27147*t12989*t20441;
  t29219 = t29212 + t29217;
  t29191 = t20810*t27096;
  t29200 = t27103*t2899*t3572;
  t29207 = t29191 + t29200;
  t29176 = -1.*t17508*t27147*t12989;
  t29177 = -1.*t92*t27147*t20441;
  t29186 = t29176 + t29177;
  t29285 = t20813*t29207;
  t29286 = -1.*t29219*t20934;
  t29290 = t29285 + t29286;
  t29322 = t20754*t29186;
  t29325 = t20593*t29290;
  t29329 = t29322 + t29325;
  t29332 = t20593*t29186;
  t29335 = -1.*t20754*t29290;
  t29338 = t29332 + t29335;
  t29342 = -1.*t21715*t29329;
  t29343 = t21650*t29338;
  t29344 = t29342 + t29343;
  t29348 = t21650*t29329;
  t29349 = t21715*t29338;
  t29351 = t29348 + t29349;
  t29359 = t22002*t29344;
  t29363 = t21853*t29351;
  t29368 = t29359 + t29363;
  t29377 = t21853*t29344;
  t29383 = -1.*t22002*t29351;
  t29384 = t29377 + t29383;
  t29386 = -1.*t23199*t29368;
  t29388 = t22724*t29384;
  t29391 = t29386 + t29388;
  t29405 = t22724*t29368;
  t29414 = t23199*t29384;
  t29417 = t29405 + t29414;
  t29466 = t27103*t8678*t92;
  t29468 = -1.*t29207*t12989;
  t29469 = t29466 + t29468;
  t29476 = -1.*t92*t29207;
  t29478 = t29476 + t27111;
  t29484 = t17508*t29469;
  t29487 = t29478*t20441;
  t29491 = t29484 + t29487;
  t29540 = t17508*t29478;
  t29543 = -1.*t29469*t20441;
  t29545 = t29540 + t29543;
  t29557 = t20754*t29545;
  t29560 = -1.*t20593*t29491*t20934;
  t29567 = t29557 + t29560;
  t29572 = t20593*t29545;
  t29576 = t20754*t29491*t20934;
  t29578 = t29572 + t29576;
  t29588 = -1.*t21715*t29567;
  t29592 = t21650*t29578;
  t29594 = t29588 + t29592;
  t29600 = t21650*t29567;
  t29605 = t21715*t29578;
  t29607 = t29600 + t29605;
  t29609 = t22002*t29594;
  t29610 = t21853*t29607;
  t29616 = t29609 + t29610;
  t29619 = t21853*t29594;
  t29622 = -1.*t22002*t29607;
  t29628 = t29619 + t29622;
  t29639 = -1.*t23199*t29616;
  t29644 = t22724*t29628;
  t29651 = t29639 + t29644;
  t29665 = t22724*t29616;
  t29668 = t23199*t29628;
  t29674 = t29665 + t29668;
  t29804 = t92*t29207;
  t29843 = t27103*t8678*t12989;
  t29847 = t29804 + t29843;
  t29868 = -1.*t29847*t20441;
  t29889 = t29484 + t29868;
  t29901 = -1.*t17508*t29847;
  t29904 = t29901 + t29543;
  t29946 = t20754*t29904;
  t29953 = -1.*t20593*t29889*t20934;
  t29966 = t29946 + t29953;
  t29996 = t20593*t29904;
  t29997 = t20754*t29889*t20934;
  t30003 = t29996 + t29997;
  t30012 = -1.*t21715*t29966;
  t30013 = t21650*t30003;
  t30014 = t30012 + t30013;
  t30030 = t21650*t29966;
  t30031 = t21715*t30003;
  t30036 = t30030 + t30031;
  t30042 = t22002*t30014;
  t30044 = t21853*t30036;
  t30062 = t30042 + t30044;
  t30070 = t21853*t30014;
  t30073 = -1.*t22002*t30036;
  t30075 = t30070 + t30073;
  t30080 = -1.*t23199*t30062;
  t30084 = t22724*t30075;
  t30091 = t30080 + t30084;
  t30096 = t22724*t30062;
  t30103 = t23199*t30075;
  t30105 = t30096 + t30103;
  t30146 = t17508*t29847;
  t30147 = t29469*t20441;
  t30148 = t30146 + t30147;
  t30126 = -1.*t27103*t20810*t2899;
  t30129 = t27096*t3572;
  t30133 = t30126 + t30129;
  t30151 = -1.*t20813*t30148;
  t30153 = -1.*t30133*t20934;
  t30154 = t30151 + t30153;
  t30187 = -1.*t21650*t20754*t30154;
  t30194 = -1.*t20593*t21715*t30154;
  t30195 = t30187 + t30194;
  t30203 = t20593*t21650*t30154;
  t30207 = -1.*t20754*t21715*t30154;
  t30210 = t30203 + t30207;
  t30213 = t22002*t30195;
  t30215 = t21853*t30210;
  t30216 = t30213 + t30215;
  t30226 = t21853*t30195;
  t30227 = -1.*t22002*t30210;
  t30232 = t30226 + t30227;
  t30242 = -1.*t23199*t30216;
  t30250 = t22724*t30232;
  t30260 = t30242 + t30250;
  t30281 = t22724*t30216;
  t30282 = t23199*t30232;
  t30287 = t30281 + t30282;
  t30177 = t20813*t30133;
  t30179 = -1.*t30148*t20934;
  t30182 = t30177 + t30179;
  t30375 = -1.*t20754*t29889;
  t30376 = -1.*t20593*t30182;
  t30380 = t30375 + t30376;
  t30382 = t20593*t29889;
  t30383 = -1.*t20754*t30182;
  t30393 = t30382 + t30383;
  t30419 = t21715*t30380;
  t30425 = t21650*t30393;
  t30434 = t30419 + t30425;
  t30437 = t21650*t30380;
  t30439 = -1.*t21715*t30393;
  t30440 = t30437 + t30439;
  t30442 = -1.*t22002*t30434;
  t30443 = t21853*t30440;
  t30445 = t30442 + t30443;
  t30451 = t21853*t30434;
  t30452 = t22002*t30440;
  t30453 = t30451 + t30452;
  t30456 = t23199*t30445;
  t30457 = t22724*t30453;
  t30461 = t30456 + t30457;
  t30474 = t22724*t30445;
  t30476 = -1.*t23199*t30453;
  t30478 = t30474 + t30476;
  t30519 = t20754*t29889;
  t30520 = t20593*t30182;
  t30533 = t30519 + t30520;
  t30554 = -1.*t21715*t30533;
  t30563 = t30554 + t30425;
  t30568 = -1.*t21650*t30533;
  t30575 = t30568 + t30439;
  t30592 = -1.*t22002*t30563;
  t30601 = t21853*t30575;
  t30602 = t30592 + t30601;
  t30619 = t21853*t30563;
  t30625 = t22002*t30575;
  t30626 = t30619 + t30625;
  t30629 = t23199*t30602;
  t30641 = t22724*t30626;
  t30644 = t30629 + t30641;
  t30653 = t22724*t30602;
  t30654 = -1.*t23199*t30626;
  t30656 = t30653 + t30654;
  t30701 = t21650*t30533;
  t30708 = t21715*t30393;
  t30747 = t30701 + t30708;
  t30771 = -1.*t21853*t30747;
  t30775 = t30592 + t30771;
  t30808 = -1.*t22002*t30747;
  t30834 = t30619 + t30808;
  t30838 = t23199*t30775;
  t30839 = t22724*t30834;
  t30841 = t30838 + t30839;
  t30845 = t22724*t30775;
  t30846 = -1.*t23199*t30834;
  t30852 = t30845 + t30846;
  t30879 = t22002*t30563;
  t30883 = t21853*t30747;
  t30887 = t30879 + t30883;
  t30891 = -1.*t23199*t30887;
  t30897 = t30891 + t30839;
  t30900 = -1.*t22724*t30887;
  t30903 = t30900 + t30846;
  t30910 = -1.*t23634*t30897;
  t30928 = t22724*t30887;
  t30929 = t23199*t30834;
  t30933 = t30928 + t30929;
  t30918 = t23598*t30897;
  t30942 = -1.*t23634*t30933;
  t30944 = t30918 + t30942;
  t28818 = t23634*t28591;
  t28824 = t23598*t28675;
  t28825 = t28818 + t28824;
  t30954 = t23634*t30897;
  t30967 = t23598*t30933;
  t30968 = t30954 + t30967;
  t30993 = -0.766044*t30968;
  t31007 = 0.642788*t30944;
  t31011 = t30993 + t31007;
  t31014 = Power(t31011,2);
  t31024 = 0.642788*t30968;
  t31026 = 0.766044*t30944;
  t31027 = t31024 + t31026;
  t31028 = Power(t31027,2);
  t31030 = t31014 + t31028;
  t31032 = 1/t31030;
  t29093 = t23634*t29077;
  t29105 = t23598*t29088;
  t29112 = t29093 + t29105;
  t29122 = t23598*t29077;
  t29124 = -1.*t23634*t29088;
  t29127 = t29122 + t29124;
  t30973 = -0.642788*t30968;
  t30977 = -0.766044*t30944;
  t30979 = t30973 + t30977;
  t29428 = t23634*t29391;
  t29429 = t23598*t29417;
  t29433 = t29428 + t29429;
  t29442 = t23598*t29391;
  t29444 = -1.*t23634*t29417;
  t29446 = t29442 + t29444;
  t29684 = t23634*t29651;
  t29696 = t23598*t29674;
  t29699 = t29684 + t29696;
  t29709 = t23598*t29651;
  t29722 = -1.*t23634*t29674;
  t29745 = t29709 + t29722;
  t30112 = t23634*t30091;
  t30115 = t23598*t30105;
  t30116 = t30112 + t30115;
  t30120 = t23598*t30091;
  t30122 = -1.*t23634*t30105;
  t30123 = t30120 + t30122;
  t30309 = t23634*t30260;
  t30316 = t23598*t30287;
  t30324 = t30309 + t30316;
  t30328 = t23598*t30260;
  t30332 = -1.*t23634*t30287;
  t30347 = t30328 + t30332;
  t30481 = -1.*t23634*t30461;
  t30482 = t23598*t30478;
  t30483 = t30481 + t30482;
  t30485 = t23598*t30461;
  t30487 = t23634*t30478;
  t30498 = t30485 + t30487;
  t30665 = -1.*t23634*t30644;
  t30667 = t23598*t30656;
  t30671 = t30665 + t30667;
  t30676 = t23598*t30644;
  t30680 = t23634*t30656;
  t30686 = t30676 + t30680;
  t30856 = -1.*t23634*t30841;
  t30857 = t23598*t30852;
  t30863 = t30856 + t30857;
  t30871 = t23598*t30841;
  t30873 = t23634*t30852;
  t30875 = t30871 + t30873;
  t30914 = t23598*t30903;
  t30915 = t30910 + t30914;
  t30919 = t23634*t30903;
  t30922 = t30918 + t30919;
  t30935 = -1.*t23598*t30933;
  t30938 = t30910 + t30935;
  t31294 = Power(t25876,2);
  t31295 = Power(t28094,2);
  t31296 = t31294 + t31295;
  t31298 = 1/t31296;
  t28760 = t20813*t28072;
  t28766 = t28053*t20934;
  t28767 = t28760 + t28766;
  p_output1[0]=1.;
  p_output1[1]=0.135*t18476*t19157 - 0.135*t20382*t20441 + t20775*t20788 + t21176*t21296 + t21643*t21648 + t21765*t21796 + t21825*t21828 + t22148*t22329 + t22455*t22465 + t23279*t23442 + t23520*t23581 + t23651*t23682 + t23721*t23738 + 0.0306*(t23634*t23682 + t23598*t23738) - 1.1312*(t23598*t23682 - 1.*t23634*t23738) - 1.*t20810*t21066*t2899 + 0.1305*(t20813*t21176 - 1.*t20810*t20934*t2899) + 0.135*t2796*t2899*t3572 - 0.135*t12989*t8678;
  p_output1[2]=t20775*t23899 + t21296*t23928 + t21643*t24018 + t21765*t24025 + t21825*t24029 + t22148*t24055 + t22455*t24100 + t23279*t24197 + t23520*t24210 + t23651*t24272 + t23721*t24283 + 0.0306*(t23634*t24272 + t23598*t24283) - 1.1312*(t23598*t24272 - 1.*t23634*t24283) - 0.135*t12989*t20441*t20810*t8678 - 0.135*t20810*t2796*t8678 - 1.*t21066*t3572*t8678 + 0.1305*(t20813*t23928 - 1.*t20934*t3572*t8678) - 0.135*t18476*t20810*t8678*t92;
  p_output1[3]=0.135*t18476*t24645 - 0.135*t20441*t24661 + 0.1305*t20813*t24672 + t21296*t24672 - 1.*t20934*t21643*t24672 + t20775*t24691 + t21765*t24709 + t21825*t24716 + t22148*t24724 + t22455*t24811 + t23279*t24840 + t23520*t24940 + t23651*t25005 + t23721*t25050 + 0.0306*(t23634*t25005 + t23598*t25050) - 1.1312*(t23598*t25005 - 1.*t23634*t25050) - 0.135*t12989*t3572*t8678 - 0.135*t2899*t92;
  p_output1[4]=-0.135*t17508*t24645 + 0.135*t20441*t25280 + 0.1305*t20813*t25398 + t21296*t25398 - 1.*t20934*t21643*t25398 + t20775*t25410 + t21765*t25541 + t21825*t25582 + t22148*t25606 + t22455*t25616 + t23279*t25718 + t23520*t25752 + t23651*t25801 + t23721*t25810 + 0.0306*(t23634*t25801 + t23598*t25810) - 1.1312*(t23598*t25801 - 1.*t23634*t25810);
  p_output1[5]=t25854*t25859 + t21643*t25876 + t20593*t21765*t25876 - 1.*t20754*t21825*t25876 + 0.1305*t25890 + t22148*t25894 + t22455*t26024 + t23279*t26067 + t23520*t26097 + t23651*t26106 + t23721*t26127 + 0.0306*(t23634*t26106 + t23598*t26127) - 1.1312*(t23598*t26106 - 1.*t23634*t26127) + t20810*t25849*t8678;
  p_output1[6]=t25398*t26169 + t25890*t26177 + t21825*t26186 + t21765*t26196 + t22455*t26273 + t22148*t26287 + t23520*t26308 + t23279*t26336 + t23721*t26363 + t23651*t26383 - 1.1312*(-1.*t23634*t26363 + t23598*t26383) + 0.0306*(t23598*t26363 + t23634*t26383);
  p_output1[7]=t26424*t26434 + t26196*t26441 + t22455*t26444 + t22148*t26584 + t23520*t26590 + t23279*t26597 + t23721*t26605 + t23651*t26612 - 1.1312*(-1.*t23634*t26605 + t23598*t26612) + 0.0306*(t23598*t26605 + t23634*t26612);
  p_output1[8]=t26444*t26639 + t26653*t26660 + t23520*t26665 + t23279*t26668 + t23721*t26792 + t23651*t26800 - 1.1312*(-1.*t23634*t26792 + t23598*t26800) + 0.0306*(t23598*t26792 + t23634*t26800);
  p_output1[9]=t26836*t26842 + t26668*t26850 + t23721*t26865 + t23651*t26871 - 1.1312*(t23598*t26871 + t26881) + 0.0306*(t23634*t26871 + t26895);
  p_output1[10]=t26865*t26906 + t27070*t27079 - 1.1312*(t26881 - 1.*t23598*t27079) + 0.0306*(t26895 - 1.*t23634*t27079);
  p_output1[11]=-1.;
  p_output1[12]=1.;
  p_output1[13]=0.135*t18476*t27114 - 0.135*t20441*t27125 + t20775*t27137 + t21066*t27147 + t21296*t27153 + 0.1305*(t20934*t27147 + t20813*t27153) + t21643*t27180 + t21765*t27191 + t21825*t27203 + t22148*t27218 + t22455*t27226 + t23279*t27253 + t23520*t27270 + t23651*t27287 + t23721*t27295 + 0.0306*(t23634*t27287 + t23598*t27295) - 1.1312*(t23598*t27287 - 1.*t23634*t27295) + 0.135*t27105*t2796 + 0.135*t12989*t27103*t8678;
  p_output1[14]=0.135*t18476*t27353 - 0.135*t20441*t27364 + t20775*t27376 + t21296*t27386 + t21643*t27403 + t21765*t27413 + t21825*t27434 + t22148*t27458 + t22455*t27470 + t23279*t27492 + t23520*t27501 + t23651*t27512 + t23721*t27526 + 0.0306*(t23634*t27512 + t23598*t27526) - 1.1312*(t23598*t27512 - 1.*t23634*t27526) - 0.135*t12989*t27096*t2899 + t20810*t21066*t27096*t8678 - 0.135*t27096*t2796*t3572*t8678 + 0.1305*(t20813*t27386 + t20810*t20934*t27096*t8678);
  p_output1[15]=0.135*t12989*t20441*t27564 + t20775*t27589 + t21066*t27595 + t21296*t27603 + 0.1305*(t20934*t27595 + t20813*t27603) + t21643*t27614 + t21765*t27623 + t21825*t27629 + t22148*t27637 + t22455*t27650 + t23279*t27659 + t23520*t27672 + t23651*t27681 + t23721*t27687 + 0.0306*(t23634*t27681 + t23598*t27687) - 1.1312*(t23598*t27681 - 1.*t23634*t27687) + 0.135*t27564*t2796 + 0.135*t18476*t27564*t92;
  p_output1[16]=0.135*t12989*t27595 + 0.135*t18476*t27730 - 0.135*t20441*t27742 + 0.1305*t20813*t27750 + t21296*t27750 - 1.*t20934*t21643*t27750 + t20775*t27761 + t21765*t27775 + t21825*t27783 + t22148*t27796 + t22455*t27810 + t23279*t27819 + t23520*t27827 + t23651*t27833 + t23721*t27843 + 0.0306*(t23634*t27833 + t23598*t27843) - 1.1312*(t23598*t27833 - 1.*t23634*t27843) + 0.135*t27096*t8678*t92;
  p_output1[17]=-0.135*t17508*t27730 + 0.135*t20441*t27885 + 0.1305*t20813*t27900 + t21296*t27900 - 1.*t20934*t21643*t27900 + t20775*t27904 + t21765*t27925 + t21825*t27937 + t22148*t27946 + t22455*t27962 + t23279*t27974 + t23520*t27986 + t23651*t27992 + t23721*t28012 + 0.0306*(t23634*t27992 + t23598*t28012) - 1.1312*(t23598*t27992 - 1.*t23634*t28012);
  p_output1[18]=t25849*t28053 + t25859*t28072 + t21643*t28094 + t20593*t21765*t28094 - 1.*t20754*t21825*t28094 + 0.1305*t28113 + t22148*t28119 + t22455*t28126 + t23279*t28132 + t23520*t28155 + t23651*t28168 + t23721*t28180 + 0.0306*(t23634*t28168 + t23598*t28180) - 1.1312*(t23598*t28168 - 1.*t23634*t28180);
  p_output1[19]=t26169*t27900 + t26177*t28113 + t21825*t28251 + t21765*t28265 + t22455*t28279 + t22148*t28288 + t23520*t28297 + t23279*t28305 + t23721*t28314 + t23651*t28323 - 1.1312*(-1.*t23634*t28314 + t23598*t28323) + 0.0306*(t23598*t28314 + t23634*t28323);
  p_output1[20]=t26441*t28265 + t26424*t28354 + t22455*t28360 + t22148*t28371 + t23520*t28394 + t23279*t28407 + t23721*t28433 + t23651*t28443 - 1.1312*(-1.*t23634*t28433 + t23598*t28443) + 0.0306*(t23598*t28433 + t23634*t28443);
  p_output1[21]=t26639*t28360 + t26653*t28487 + t23520*t28494 + t23279*t28504 + t23721*t28522 + t23651*t28529 - 1.1312*(-1.*t23634*t28522 + t23598*t28529) + 0.0306*(t23598*t28522 + t23634*t28529);
  p_output1[22]=t26850*t28504 + t26836*t28572 + t23721*t28591 + t23651*t28598 - 1.1312*(t23598*t28598 + t28602) + 0.0306*(t23634*t28598 + t28612);
  p_output1[23]=t26906*t28591 + t27070*t28675 - 1.1312*(t28602 - 1.*t23598*t28675) + 0.0306*t28733;
  p_output1[24]=-1.;
  p_output1[25]=1.;
  p_output1[26]=-0.135*t20441*t27730 + 0.135*t18476*t27885 + t20775*t27900 + 0.135*t27595*t2796 + t21066*t28053 + t21296*t28072 + t21643*t28113 + t21825*t28265 + t21765*t28354 + t22148*t28360 + t22455*t28487 + t23520*t28504 + t23279*t28572 + t23651*t28591 + t23721*t28675 - 1.1312*t28733 + 0.1305*t28767 + 0.0306*t28825 + 0.135*t12989*t27096*t8678;
  p_output1[27]=0.135*t18476*t28853 - 0.135*t20441*t28867 + t20775*t28880 + t21296*t28895 + t21643*t28915 + t21765*t28943 + t21825*t28950 + t22148*t28966 + 0.135*t12989*t27103*t2899 + t22455*t29015 + t23279*t29042 + t23520*t29063 + t23651*t29077 + t23721*t29088 + 0.0306*t29112 - 1.1312*t29127 - 1.*t20810*t21066*t27103*t8678 + 0.135*t27103*t2796*t3572*t8678 + 0.1305*(t20813*t28895 - 1.*t20810*t20934*t27103*t8678);
  p_output1[28]=0.135*t12989*t20441*t27147 + 0.135*t27147*t2796 + t20775*t29186 + t21066*t29207 + t21296*t29219 + 0.1305*(t20934*t29207 + t20813*t29219) + t21643*t29290 + t21765*t29329 + t21825*t29338 + t22148*t29344 + t22455*t29351 + t23279*t29368 + t23520*t29384 + t23651*t29391 + t23721*t29417 + 0.0306*t29433 - 1.1312*t29446 + 0.135*t18476*t27147*t92;
  p_output1[29]=0.135*t12989*t29207 + 0.135*t18476*t29469 - 0.135*t20441*t29478 + 0.1305*t20813*t29491 + t21296*t29491 - 1.*t20934*t21643*t29491 + t20775*t29545 + t21765*t29567 + t21825*t29578 + t22148*t29594 + t22455*t29607 + t23279*t29616 + t23520*t29628 + t23651*t29651 + t23721*t29674 + 0.0306*t29699 - 1.1312*t29745 - 0.135*t27103*t8678*t92;
  p_output1[30]=-0.135*t17508*t29469 + 0.135*t20441*t29847 + 0.1305*t20813*t29889 + t21296*t29889 - 1.*t20934*t21643*t29889 + t20775*t29904 + t21765*t29966 + t21825*t30003 + t22148*t30014 + t22455*t30036 + t23279*t30062 + t23520*t30075 + t23651*t30091 + t23721*t30105 + 0.0306*t30116 - 1.1312*t30123;
  p_output1[31]=t25849*t30133 + t25859*t30148 + t21643*t30154 + t20593*t21765*t30154 - 1.*t20754*t21825*t30154 + 0.1305*t30182 + t22148*t30195 + t22455*t30210 + t23279*t30216 + t23520*t30232 + t23651*t30260 + t23721*t30287 + 0.0306*t30324 - 1.1312*t30347;
  p_output1[32]=t26169*t29889 + t26177*t30182 + t21825*t30380 + t21765*t30393 + t22455*t30434 + t22148*t30440 + t23520*t30445 + t23279*t30453 + t23721*t30461 + t23651*t30478 - 1.1312*t30483 + 0.0306*t30498;
  p_output1[33]=t26441*t30393 + t26424*t30533 + t22455*t30563 + t22148*t30575 + t23520*t30602 + t23279*t30626 + t23721*t30644 + t23651*t30656 - 1.1312*t30671 + 0.0306*t30686;
  p_output1[34]=t26639*t30563 + t26653*t30747 + t23520*t30775 + t23279*t30834 + t23721*t30841 + t23651*t30852 - 1.1312*t30863 + 0.0306*t30875;
  p_output1[35]=t26850*t30834 + t26836*t30887 + t23721*t30897 + t23651*t30903 - 1.1312*t30915 + 0.0306*t30922;
  p_output1[36]=t26906*t30897 + t27070*t30933 - 1.1312*t30938 + 0.0306*t30944;
  p_output1[37]=-1.;
  p_output1[38]=(0.642788*t28733 - 0.766044*t28825)*t30979*t31032 + (0.766044*t28733 + 0.642788*t28825)*t31011*t31032;
  p_output1[39]=(-0.766044*t29112 + 0.642788*t29127)*t30979*t31032 + (0.642788*t29112 + 0.766044*t29127)*t31011*t31032;
  p_output1[40]=(-0.766044*t29433 + 0.642788*t29446)*t30979*t31032 + (0.642788*t29433 + 0.766044*t29446)*t31011*t31032;
  p_output1[41]=(-0.766044*t29699 + 0.642788*t29745)*t30979*t31032 + (0.642788*t29699 + 0.766044*t29745)*t31011*t31032;
  p_output1[42]=(-0.766044*t30116 + 0.642788*t30123)*t30979*t31032 + (0.642788*t30116 + 0.766044*t30123)*t31011*t31032;
  p_output1[43]=(-0.766044*t30324 + 0.642788*t30347)*t30979*t31032 + (0.642788*t30324 + 0.766044*t30347)*t31011*t31032;
  p_output1[44]=(0.642788*t30483 - 0.766044*t30498)*t30979*t31032 + (0.766044*t30483 + 0.642788*t30498)*t31011*t31032;
  p_output1[45]=(0.642788*t30671 - 0.766044*t30686)*t30979*t31032 + (0.766044*t30671 + 0.642788*t30686)*t31011*t31032;
  p_output1[46]=(0.642788*t30863 - 0.766044*t30875)*t30979*t31032 + (0.766044*t30863 + 0.642788*t30875)*t31011*t31032;
  p_output1[47]=(0.642788*t30915 - 0.766044*t30922)*t30979*t31032 + (0.766044*t30915 + 0.642788*t30922)*t31011*t31032;
  p_output1[48]=(0.642788*t30938 + t30977)*t30979*t31032 + (0.766044*t30938 + t31007)*t31011*t31032;
  p_output1[49]=-1.;
  p_output1[50]=t25876*(-1.*t20934*t27147 - 1.*t20813*t27153)*t31298;
  p_output1[51]=t28767*(-1.*t20813*t21176 + t20810*t20934*t2899)*t31298 + t25876*t31298*(-1.*t20813*t27386 - 1.*t20810*t20934*t27096*t8678);
  p_output1[52]=t25876*(-1.*t20934*t27595 - 1.*t20813*t27603)*t31298 + t28767*t31298*(-1.*t20813*t23928 + t20934*t3572*t8678);
  p_output1[53]=-1.*t20813*t25876*t27750*t31298 - 1.*t20813*t24672*t28767*t31298;
  p_output1[54]=-1.*t20813*t25876*t27900*t31298 - 1.*t20813*t25398*t28767*t31298;
  p_output1[55]=t25876*(-1.*t20813*t28053 + t20934*t28072)*t31298 + t28767*t31298*(t20934*t25854 - 1.*t20810*t20813*t8678);
  p_output1[56]=-1.;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 5 && ncols == 1) && 
      !(mrows == 1 && ncols == 5))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 57, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "J_h_LeftToeBottom_LeftStance.hh"

namespace Times[2, step, Pattern[Cassie, Blank[]]]
{

void J_h_LeftToeBottom_LeftStance_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
